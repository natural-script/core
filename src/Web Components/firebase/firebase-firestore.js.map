{"version":3,"sources":["webpack:///firebase-firestore.js","webpack:///./firestore/index.js","webpack:///../firestore/dist/esm/src/util/log.js","webpack:///../firestore/dist/esm/src/util/assert.js","webpack:///../firestore/dist/esm/src/platform/platform.js","webpack:///../firestore/dist/esm/src/util/api.js","webpack:///../firestore/dist/esm/src/util/obj.js","webpack:///../firestore/dist/esm/src/util/input_validation.js","webpack:///../firestore/dist/esm/src/util/misc.js","webpack:///../firestore/dist/esm/src/api/blob.js","webpack:///../firestore/dist/esm/src/model/field_value.js","webpack:///../firestore/dist/esm/src/util/types.js","webpack:///../firestore/dist/esm/src/core/query.js","webpack:///../firestore/dist/esm/src/remote/rpc_error.js","webpack:///../firestore/dist/esm/src/model/collections.js","webpack:///../firestore/dist/esm/src/remote/watch_change.js","webpack:///../firestore/dist/esm/src/remote/serializer.js","webpack:///../firestore/dist/esm/src/api/field_path.js","webpack:///../firestore/dist/esm/src/core/view.js","webpack:///../firestore/dist/esm/src/local/encoded_resource_path.js","webpack:///../firestore/dist/esm/src/local/indexeddb_schema.js","webpack:///../firestore/dist/esm/src/local/simple_db.js","webpack:///../firestore/dist/esm/src/local/indexeddb_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/indexeddb_query_cache.js","webpack:///../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/local_serializer.js","webpack:///../firestore/dist/esm/src/api/credentials.js","webpack:///../firestore/dist/esm/src/api/observer.js","webpack:///../firestore/dist/esm/src/api/user_data_converter.js","webpack:///../firestore/dist/esm/src/api/database.js","webpack:///../firestore/dist/esm/src/platform/config.js","webpack:///../firestore/dist/esm/index.js","webpack:///../firestore/dist/esm/src/core/version.js","webpack:///../firestore/dist/esm/src/util/error.js","webpack:///../firestore/dist/esm/src/api/geo_point.js","webpack:///../firestore/dist/esm/src/core/database_info.js","webpack:///../firestore/dist/esm/src/model/path.js","webpack:///../firestore/dist/esm/src/model/document_key.js","webpack:///../firestore/dist/esm/src/model/document.js","webpack:///../firestore/dist/esm/src/util/sorted_map.js","webpack:///../firestore/dist/esm/src/local/query_data.js","webpack:///../firestore/dist/esm/src/core/timestamp.js","webpack:///../firestore/dist/esm/src/core/snapshot_version.js","webpack:///../firestore/dist/esm/src/model/mutation.js","webpack:///../firestore/dist/esm/src/remote/existence_filter.js","webpack:///../firestore/dist/esm/src/util/sorted_set.js","webpack:///../firestore/dist/esm/src/remote/remote_event.js","webpack:///../firestore/dist/esm/src/remote/stream_bridge.js","webpack:///../firestore/dist/esm/src/platform_browser/webchannel_connection.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_platform.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_init.js","webpack:///../firestore/dist/esm/src/core/types.js","webpack:///../firestore/dist/esm/src/core/view_snapshot.js","webpack:///../firestore/dist/esm/src/core/target_id_generator.js","webpack:///../firestore/dist/esm/src/model/document_set.js","webpack:///../firestore/dist/esm/src/util/obj_map.js","webpack:///../firestore/dist/esm/src/core/event_manager.js","webpack:///../firestore/dist/esm/src/local/persistence_promise.js","webpack:///../firestore/dist/esm/src/local/eager_garbage_collector.js","webpack:///../firestore/dist/esm/src/local/local_view_changes.js","webpack:///../firestore/dist/esm/src/local/reference_set.js","webpack:///../firestore/dist/esm/src/remote/persistent_stream.js","webpack:///../firestore/dist/esm/src/core/sync_engine.js","webpack:///../firestore/dist/esm/src/model/mutation_batch.js","webpack:///../firestore/dist/esm/src/local/indexeddb_persistence.js","webpack:///../firestore/dist/esm/src/local/local_documents_view.js","webpack:///../firestore/dist/esm/src/local/remote_document_change_buffer.js","webpack:///../firestore/dist/esm/src/local/local_store.js","webpack:///../firestore/dist/esm/src/local/memory_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/memory_query_cache.js","webpack:///../firestore/dist/esm/src/local/memory_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/memory_persistence.js","webpack:///../firestore/dist/esm/src/local/no_op_garbage_collector.js","webpack:///../firestore/dist/esm/src/util/promise.js","webpack:///../firestore/dist/esm/src/remote/backoff.js","webpack:///../firestore/dist/esm/src/remote/datastore.js","webpack:///../firestore/dist/esm/src/core/transaction.js","webpack:///../firestore/dist/esm/src/remote/remote_store.js","webpack:///../firestore/dist/esm/src/core/firestore_client.js","webpack:///../firestore/dist/esm/src/util/async_observer.js","webpack:///../firestore/dist/esm/src/util/async_queue.js","webpack:///../firestore/dist/esm/src/auth/user.js","webpack:///../firestore/dist/esm/src/api/field_value.js","webpack:///../webchannel-wrapper/dist/index.js"],"names":["webpackJsonpFirebase","113","module","exports","__webpack_require__","114","__webpack_exports__","getLogLevel","logLevel","setLogLevel","newLevel","debug","tag","msg","obj","_i","arguments","length","LogLevel","DEBUG","time","Date","toISOString","args","map","argToString","console","log","apply","SDK_VERSION","concat","log_error","ERROR","error","platform","platform_PlatformSupport","getPlatform","formatJSON","e","fail","failure","message","Error","assert","assertion","emptyByteString","makeConstructorPrivate","cls","optionalMessage","PublicConstructor","FirestoreError","Code","INVALID_ARGUMENT","prototype","staticProperty","hasOwnProperty","contains","key","Object","call","defaulted","value","defaultValue","undefined","forEachNumber","fn","num","isNaN","forEach","isEmpty","shallowCopy","result","validateExactNumberOfArgs","functionName","numberOfArgs","formatPlural","validateAtLeastNumberOfArgs","minNumberOfArgs","validateBetweenNumberOfArgs","maxNumberOfArgs","validateNamedArrayAtLeastNumberOfElements","name","minNumberOfElements","Array","validateArgType","type","position","argument","validateType","ordinal","validateOptionalArgType","validateNamedType","optionName","validateNamedOptionalType","validateNamedPropertyEquals","inputName","input","expected","expectedDescription","expected_1","val","push","valueDescription","actualDescription","join","validateNamedOptionalPropertyEquals","isPlainObject","description","getPrototypeOf","substring","JSON","stringify","customObjectName","tryGetCustomObjectType","constructor","funcNameRegex","results","exec","validateDefined","validateOptionNames","options","optionNames","_","indexOf","invalidClassError","str","primitiveComparator","left","right","equals","isEqual","arrayEquals","i","immediatePredecessor","s","lastIndex","charAt","String","fromCharCode","charCodeAt","immediateSuccessor","assertUint8ArrayAvailable","Uint8Array","UNIMPLEMENTED","assertBase64Available","base64Available","numericComparator","numericEquals","isNullOrUndefined","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","fieldFilter","field","op","NullValue","INSTANCE","query_RelationOp","EQUAL","NullFilter","DoubleValue","NAN","NanFilter","query_RelationFilter","isPermanentError","code","OK","CANCELLED","UNKNOWN","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","INTERNAL","UNAVAILABLE","UNAUTHENTICATED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","DATA_LOSS","mapCodeFromRpcStatus","status","RpcCode","mapCodeFromRpcCode","mapRpcCodeFromCode","mapCodeFromHttpStatus","maybeDocumentMap","EMPTY_MAYBE_DOCUMENT_MAP","documentMap","EMPTY_DOCUMENT_MAP","documentVersionMap","EMPTY_DOCUMENT_VERSION_MAP","documentKeySet","EMPTY_DOCUMENT_KEY_SET","applyResumeToken","change","resumeToken","assertPresent","parseInt64","hasTag","fromDotSeparatedString","path","search","RESERVED","field_path_FieldPath","bind","split","compareChangeType","c1","c2","order","ChangeType","Added","Modified","Metadata","Removed","encode","encodeSeparator","encodeSegment","get","segment","resultBuf","c","escapeChar","encodedNul","encodedEscape","encodedSeparatorChar","decode","path_ResourcePath","EMPTY_PATH","lastReasonableEscapeIndex","segments","segmentBuilder","start","end","currentPiece","createOrUpgradeDb","db","oldVersion","createObjectStore","DbMutationQueue","store","keyPath","DbMutationBatch","DbTargetDocument","createIndex","documentTargetsIndex","documentTargetsKeyPath","unique","DbTarget","queryTargetsIndexName","queryTargetsKeyPath","indexeddb_schema_DbDocumentMutation","DbRemoteDocument","DbOwner","DbTargetGlobal","wrapRequest","request","persistence_promise_PersistencePromise","resolve","reject","onsuccess","event","target","onerror","validateStreamToken","token","mutationsStore","txn","getStore","documentMutationsStore","mutationQueuesStore","simple_db_SimpleDbTransaction","targetsStore","indexeddb_query_cache_getStore","globalTargetStore","documentTargetStore","remoteDocumentsStore","dbKey","docKey","toArray","isDocumentQuery","dbQuery","documents","makeCredentialsProvider","credentials","credentials_EmptyCredentialsProvider","credentials_FirstPartyCredentialsProvider","client","sessionIndex","isPartialObserver","implementsAnyMethods","methods","object","methods_1","method","isWrite","dataSource","UserDataSource","Set","MergeSet","Update","QueryValue","looksLikeJsonObject","geo_point_GeoPoint","blob_Blob","DocumentKeyReference","FieldValueImpl","validatePlainObject","context","createError","fieldPathFromArgument","methodName","_internalPath","fieldPathFromDotSeparatedString","errorMessage","validateSetOptions","merge","validateSnapshotOptions","serverTimestamps","validateReference","documentRef","firestore","database_DocumentReference","changesFromSnapshot","snapshot","oldDocs","lastDoc_1","index_1","docChanges","doc","database_QueryDocumentSnapshot","fromCache","query","docComparator","oldIndex","newIndex","indexTracker_1","delete","add","resultChangeType","configureForFirebase","firebase","registerService","app","database_Firestore","firestoreNamespace","registerFirestore","instance","defineProperty","esm","PlatformSupport","setPlatform","__extends","this","extendStatics","setPrototypeOf","__proto__","d","b","p","__","create","_super","_this","toString","misc_AutoId","AutoId","newId","chars","autoId","Math","floor","random","Blob","binaryString","_binaryString","fromBase64String","base64","atob","fromUint8Array","array","char","toBase64","btoa","toUint8Array","buffer","other","_compareTo","PublicBlob","GeoPoint","latitude","longitude","isFinite","_lat","_long","enumerable","configurable","DatabaseInfo","databaseId","persistenceKey","host","ssl","DEFAULT_DATABASE_NAME","database_info_DatabaseId","DatabaseId","projectId","database","compareTo","path___extends","path_Path","Path","offset","init","len","construct","comparator","child","nameOrPath","slice","limit","popFirst","size","popLast","firstSegment","lastSegment","index","isPrefixOf","p1","p2","min","ResourcePath","canonicalString","fromString","filter","identifierRegExp","path_FieldPath","FieldPath","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","current","addCurrentSegment","inBackticks","next","document_key_DocumentKey","DocumentKey","isDocumentKey","k1","k2","fromSegments","fromPathString","EMPTY","document_Document","Document","version","data","hasLocalMutations","fieldValue","compareByKey","d1","d2","compareByField","v1","v2","document_NoDocument","NoDocument","sorted_map_SortedMap","SortedMap","root","sorted_map_LLRBNode","insert","copy","BLACK","remove","node","cmp","getPredecessorKey","rightParent","prunedNodes","minKey","maxKey","inorderTraversal","action","k","v","reverseTraversal","getIterator","sorted_map_SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","SortedMapIterator","startKey","isReverse","nodeStack","getNext","pop","hasNext","peek","LLRBNode","color","RED","n","fixUp","removeMin","isRed","moveRedLeft","smallest","rotateRight","moveRedRight","rotateLeft","colorFlip","nl","nr","checkMaxDepth","blackDepth","check","pow","LLRBEmptyNode","TypeOrder","field_value___extends","ServerTimestampBehavior","QueryPurpose","field_value_FieldValueOptions","FieldValueOptions","serverTimestampBehavior","fromSnapshotOptions","Estimate","Previous","defaultOptions","Default","field_value_FieldValue","FieldValue","defaultCompareTo","typeOrder","internalValue","field_value_BooleanValue","BooleanValue","of","TRUE","FALSE","NumberValue","IntegerValue","NaN","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","field_value_StringValue","StringValue","TimestampValue","toDate","ServerTimestampValue","localWriteTime","previousValue","BlobValue","field_value_RefValue","RefValue","GeoPointValue","field_value_ObjectValue","ObjectValue","it1","it2","next1","next2","set","to","setChild","newChild","pathSegment","childName","field_value_ArrayValue","ArrayValue","minLength","NumberAsAny","Number","query_Query","Query","explicitOrderBy","filters","startAt","endAt","memoizedCanonicalId","memoizedOrderBy","assertValidBound","atPath","inequalityField","getInequalityFilterField","firstOrderByField","getFirstOrderByField","KEY_ORDERING_ASC","query_OrderBy","foundKeyOrdering","_a","orderBy","lastDirection","dir","Direction","ASCENDING","KEY_ORDERING_DESC","addFilter","isInequality","newFilters","addOrderBy","newOrderBy","withLimit","withStartAt","bound","withEndAt","canonicalId","_b","_c","comparedOnKeyField","comp","compare","matches","matchesAncestor","matchesOrderBy","matchesFilters","matchesBounds","hasLimit","docPath","sortsBeforeDocument","RelationOp","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","RelationFilter","refValue","comparison","matchesComparison","matchesValue","DESCENDING","query_Bound","Bound","before","component","orderByComponent","docValue","thisPosition","otherPosition","OrderBy","isKeyOrderBy","isoRegExp","RegExp","timestamp_Timestamp","Timestamp","seconds","nanos","now","fromEpochMilliseconds","fromDate","date","getTime","milliseconds","fromISOString","utc","fraction","nanoStr","substr","toEpochMilliseconds","snapshot_version_SnapshotVersion","SnapshotVersion","timestamp","fromMicroseconds","fromTimestamp","forDeletedDoc","MIN","toMicroseconds","toTimestamp","MutationType","query_data_QueryData","QueryData","targetId","purpose","snapshotVersion","update","updated","mutation___extends","mutation_FieldMask","FieldMask","fields","ServerTimestampTransform","FieldTransform","transform","MutationResult","transformResults","mutation_Precondition","Precondition","updateTime","exists","isValidFor","maybeDoc","isNone","NONE","mutation_Mutation","Mutation","verifyKeyMatches","getPostMutationVersion","mutation_SetMutation","SetMutation","precondition","applyToRemoteDocument","mutationResult","applyToLocalView","baseDoc","mutation_PatchMutation","PatchMutation","fieldMask","Patch","newData","patchDocument","patchObject","fieldPath","newValue","mutation_TransformMutation","TransformMutation","fieldTransforms","Transform","requireDocument","transformObject","localTransformResults","fieldTransform","mutation_DeleteMutation","DeleteMutation","Delete","ExistenceFilter","count","CurrentStatusUpdate","sorted_set_SortedSet","SortedSet","fromMapKeys","keys","has","elem","first","last","cb","forEachInRange","range","iter","forEachWhile","firstAfterOrEqual","unionWith","thisIt","otherIt","thisElem","otherElem","remote_event_RemoteEvent","RemoteEvent","targetChanges","documentUpdates","addDocumentUpdate","handleExistenceFilterMismatch","mapping","ResetMapping","currentStatusUpdate","MarkNotCurrent","WatchTargetChangeState","EMPTY_KEY_SET","docs","UpdateMapping","addedDocuments","removedDocuments","applyToKeySet","DocumentWatchChange","updatedTargetIds","removedTargetIds","newDoc","ExistenceFilterChange","existenceFilter","watch_change_WatchTargetChange","WatchTargetChange","state","targetIds","cause","watch_change_WatchChangeAggregator","WatchChangeAggregator","listenTargets","pendingTargetResponses","existenceFilters","frozen","watchChange","addDocumentChange","addTargetChange","addExistenceFilterChange","addChanges","watchChanges","createRemoteEvent","isActiveTarget","ensureTargetChange","None","docChange","relevant","targetChange","NoChange","recordTargetResponse","Current","MarkCurrent","Reset","newCount","DIRECTIONS","dirs","OPERATORS","ops","serializer_JsonProtoSerializer","JsonProtoSerializer","useProto3Json","unsafeCastProtoByteString","byteString","fromRpcStatus","toInt32Value","fromInt32Value","toBytes","bytes","fromBlob","blob","toVersion","fromVersion","toResourceName","fullyQualifiedPrefixPath","fromResourceName","resource","isValidResourceName","toName","fromName","extractLocalPathFromResourceName","toQueryPath","encodedDatabaseId","fromQueryPath","resourceName","toValue","nullValue","booleanValue","integerValue","doubleValue","stringValue","mapValue","toMapValue","arrayValue","toArrayValue","timestampValue","geoPointValue","bytesValue","referenceValue","fromValue","fromFields","values","dbId","toMutationDocument","toFields","toDocument","document","fromDocument","fromFound","found","fromMissing","missing","readTime","fromMaybeDocument","toWatchTargetChangeState","toTestWatchChange","documentChange","documentDelete","documentRemove","targetChangeType","fromWatchChange","fromWatchTargetChangeState","causeProto","entityChange","docDelete","docRemove","versionFromListenResponse","toMutation","mutation","updateMask","toDocumentMask","toFieldTransform","currentDocument","toPrecondition","fromMutation","proto","fromPrecondition","fromDocumentMask","fromFieldTransform","fromWriteResult","fromWriteResults","protos","setToServerValue","toDocumentsTarget","fromDocumentsTarget","documentsTarget","toQueryTarget","structuredQuery","parent","from","collectionId","where","toFilter","toOrder","toCursor","fromQueryTarget","fromCount","filterBy","fromFilter","fromOrder","fromCursor","toListenRequestLabels","queryData","toLabel","goog-listen-tags","Listen","ExistenceFilterMismatch","LimboResolution","toTarget","toRelationFilter","toUnaryFilter","compositeFilter","unaryFilter","fromUnaryFilter","fromRelationFilter","f","reduce","accum","orderBys","toPropertyOrder","fromPropertyOrder","cursor","toDirection","fromDirection","toOperatorName","fromOperatorName","toFieldPathReference","fromFieldPathReference","fieldReference","direction","nanField","nullField","fieldPaths","paths","dist","stream_bridge_StreamBridge","StreamBridge","sendFn","closeFn","onOpen","callback","wrappedOnOpen","onClose","wrappedOnClose","onMessage","wrappedOnMessage","close","send","callOnOpen","callOnClose","err","callOnMessage","LOG_TAG","RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","X_GOOG_API_CLIENT_VALUE","webchannel_connection_WebChannelConnection","WebChannelConnection","info","pool","baseUrl","modifyHeadersForRequest","headers","header","authHeaders","invokeRPC","rpcName","url","makeUrl","Promise","getObject","xhr","listenOnce","COMPLETE","getLastErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","status_1","getStatus","getResponseText","getStatusText","getLastError","releaseObject","requestString","Content-Type","invokeStreamingRPC","openStream","urlParts","webchannelTransport","backgroundChannelTest","httpSessionIdParam","initMessageHeaders","httpHeadersOverwriteParam","sendRawJson","supportsCrossDomainXhr","channel","createWebChannel","opened","closed","streamBridge","open","unguardedEventListen","listen","param","setTimeout","EventType","OPEN","CLOSE","MESSAGE","msgData","status_2","urlRpcName","browser_platform_BrowserPlatform","BrowserPlatform","loadConnection","databaseInfo","newSerializer","encoded","raw","OnlineState","fieldNames","documentId","_DOCUMENT_ID","SyncState","GeneratorIds","view_snapshot_DocumentChangeSet","DocumentChangeSet","changeMap","track","oldChange","getChanges","changes","ViewSnapshot","hasPendingWrites","syncStateChanged","otherChanges","document_set_DocumentSet","DocumentSet","keyedMap","sortedSet","emptySet","oldSet","prevDoc","thisDoc","otherDoc","docStrings","newSet","obj_map_ObjectMap","ObjectMap","mapKeyFn","inner","id","matches_1","otherKey","splice","entries","entries_1","QueryListenersInfo","listeners","event_manager_EventManager","EventManager","syncEngine","queries","q","onlineState","Unknown","subscribe","onChange","onError","listener","firstListen","queryInfo","applyOnlineStateChange","viewSnap","onViewSnapshot","then","unlisten","lastListen","viewSnaps","viewSnaps_1","event_manager_QueryListener","QueryListener","queryObserver","raisedInitialEvent","snap","includeDocumentMetadataChanges","shouldRaiseEvent","shouldRaiseInitialEvent","raiseInitialEvent","maybeOnline","Failed","waitForSyncWhenOnline","hasPendingWritesChanged","includeQueryMetadataChanges","getInitialViewChanges","PersistencePromise","nextCallback","catchCallback","isDone","callbackAttached","catch","nextFn","catchFn","wrapFailure","wrapSuccess","toPromise","wrapUserFunction","waitFor","all","promise","nextPromise","idx","initial","eager_garbage_collector_EagerGarbageCollector","EagerGarbageCollector","isEager","sources","potentialGarbage","addGarbageSource","garbageSource","setGarbageCollector","removeGarbageSource","addPotentialGarbageKey","collectGarbage","promises","garbageKeys","hasRefsPromise","documentHasAnyReferences","hasRefs","source","containsKey","local_view_changes_LocalViewChanges","LocalViewChanges","addedKeys","removedKeys","fromSnapshot","viewSnapshot","reference_set_ReferenceSet","ReferenceSet","refsByKey","reference_set_DocReference","refsByTarget","compareByTargetId","garbageCollector","addReference","ref","addReferences","removeReference","removeRef","removeReferences","removeReferencesForId","emptyKey","startRef","endRef","removeAllReferences","referencesForId","firstRef","DocReference","targetOrBatchId","RESERVED_BITS","PersistentStreamState","TargetIdGenerator","generatorId","initAfter","afterWithoutGenerator","afterGenerator","previousId","forLocalStore","LocalStore","forSyncEngine","SyncEngine","AddedLimboDocument","RemovedLimboDocument","view_View","View","syncedDocuments","syncState","limboDocuments","mutatedKeys","documentSet","computeDocChanges","previousChanges","changeSet","oldDocumentSet","newMutatedKeys","newDocumentSet","needsRefill","lastDocInLimit","newMaybeDoc","oldDoc","docsEqual","applyChanges","sort","limboChanges","applyTargetChange","synced","newSyncState","Synced","Local","shouldBeInLimbo","targetMapping","oldLimboDocuments","QueryView","view","sync_engine_SyncEngine","localStore","remoteStore","currentUser","viewHandler","errorHandler","queryViewsByQuery","queryViewsByTarget","limboTargetsByKey","limboKeysByTarget","limboDocumentRefs","limboCollector","mutationUserCallbacks","targetIdGenerator","assertSubscribed","allocateQuery","executeQuery","remoteDocumentKeys","remoteKeys","viewDocChanges","viewChange","queryView","releaseQuery","removeAndCleanupQuery","write","batch","userCallback","localWrite","addMutationCallback","batchId","emitNewSnapsAndNotifyLocalStore","fillWritePipeline","wrapUpdateFunctionError","runTransaction","updateFunction","retries","transaction","createTransaction","userPromise","commit","applyRemoteEvent","remoteEvent","limboKey","newViewSnapshots","rejectListen","docMap","event_1","queryView_1","applySuccessfulWrite","mutationBatchResult","processUserCallback","acknowledgeBatch","rejectFailedWrite","rejectBatch","newCallbacks","toKey","gcLimboDocuments","updateTrackedLimbos","limboChanges_1","limboChange","trackLimboChange","limboTargetId","currentLimboDocs","newSnaps","docChangesInAllViews","queriesProcessed","notifyLocalViewChanges","fnName","handleUserChange","user","BATCHID_UNKNOWN","mutation_batch_MutationBatch","MutationBatch","mutations","batchResult","mutationResults","keySet","isTombstone","toTombstone","mutation_batch_MutationBatchResult","MutationBatchResult","commitVersion","streamToken","docVersions","versionMap","DbTimestamp","ownerId","leaseTimestampMs","userId","lastAcknowledgedBatchId","lastStreamToken","localWriteTimeMs","DbDocumentMutation","prefixForUser","prefixForPath","PLACEHOLDER","DbNoDocument","noDocument","lastListenSequenceNumber","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","ALL_STORES","simple_db_SimpleDb","SimpleDb","openOrCreate","runUpgrade","isAvailable","window","indexedDB","onupgradeneeded","deleteDatabase","ua","navigator","userAgent","mode","objectStores","transactionFn","transactionFnResult","abort","completionPromise","IterationController","dbCursor","shouldStop","nextKey","done","skip","SimpleDbTransaction","objectStoresNames","aborted","onabort","oncomplete","storeName","objectStore","simple_db_SimpleDbStore","SimpleDbStore","put","keyOrValue","loadAll","indexOrRange","iterateCursor","deleteAll","keysOnly","control","iterate","optionsOrCallback","cursorRequest","controller","userResult","primaryKey","skipToKey","continue","indexName","reverse","openKeyCursor","openCursor","indexeddb_mutation_queue_IndexedDbMutationQueue","IndexedDbMutationQueue","serializer","forUser","uid","isUnauthenticated","loadNextBatchIdFromDb","nextBatchId","metadata","checkEmpty","empty","maxBatchId","nextUser","IDBKeyRange","keyForBatchId","getNextBatchId","getHighestAcknowledgedBatchId","getLastStreamToken","setLastStreamToken","addMutationBatch","dbBatch","toDbMutationBatch","mutations_1","indexKey","lookupMutationBatch","fromDbMutationBatch","getNextMutationBatchAfterBatchId","lowerBound","foundBatch","getAllMutationBatches","dbBatches","getAllMutationBatchesThroughBatchId","getAllMutationBatchesAffectingDocumentKey","documentKey","indexPrefix","indexStart","userID","encodedPath","batchID","mutationKey","getAllMutationBatchesAffectingQuery","queryPath","immediateChildrenLength","uniqueBatchIDs","removeMutationBatches","batches","indexTxn","this_1","batches_1","only","numDeleted","removePromise","performConsistencyCheck","startRange","danglingMutationReferences","gc","indexeddb_query_cache_IndexedDbQueryCache","IndexedDbQueryCache","lastSavedVersion","getHighestTargetId","getLastRemoteSnapshotVersion","setLastRemoteSnapshotVersion","addQueryData","addedQueryPromise","toDbTarget","removeQueryData","removeMatchingKeysForTargetId","getQueryData","fromDbTarget","addMatchingKeys","removeMatchingKeys","notifyGCForRemovedKeys","getMatchingKeysForTargetId","indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache","IndexedDbRemoteDocumentCache","addEntry","maybeDocument","toDbRemoteDocument","removeEntry","getEntry","dbRemoteDoc","fromDbRemoteDocument","getDocumentsMatchingQuery","local_serializer_LocalSerializer","LocalSerializer","remoteSerializer","remoteDoc","serializedMutations","m","dbTarget","queryProto","dbTimestamp","EXISTING_OWNER_ERROR_MSG","indexeddb_persistence_IndexedDbPersistence","IndexedDbPersistence","prefix","generateOwnerId","dbName","MAIN_DATABASE","localStoragePrefix","started","simpleDb","tryAcquireOwnerLease","scheduleOwnerLeaseRefreshes","attachWindowUnloadHook","persistenceError","shutdown","detachWindowUnloadHook","stopOwnerLeaseRefreshes","releaseOwnerLease","getMutationQueue","getQueryCache","getRemoteDocumentCache","operation","ensureOwnerLease","buildStoragePrefix","isDefaultDatabase","dbOwner","validOwner","newDbOwner","minAcceptable","maxAcceptable","getZombiedOwnerId","ownerLeaseRefreshHandle","setInterval","reason","clearInterval","windowUnloadHandler","setZombiedOwnerId","addEventListener","removeEventListener","zombiedOwnerId","localStorage","getItem","zombiedOwnerLocalStorageKey","zombieOwnerId","removeItem","setItem","local_documents_view_LocalDocumentsView","LocalDocumentsView","remoteDocumentCache","mutationQueue","getDocument","computeLocalDocument","getDocuments","getDocumentsMatchingDocumentQuery","getDocumentsMatchingCollectionQuery","queryResults","computeLocalDocuments","promisedResults","matchingMutationBatches","matchingKeys","matchingMutationBatches_1","mutatedDoc","remote_document_change_buffer_RemoteDocumentChangeBuffer","RemoteDocumentChangeBuffer","assertChanges","bufferedEntry","local_store_LocalStore","persistence","initialUser","localViewReferences","heldBatchResults","remoteDocuments","queryCache","localDocuments","startMutationQueue","startQueryCache","oldBatches","promisedOldBatches","newBatches","changedKeys","_d","highestAck","ackedBatches","promisedBatch","changedDocuments","affected","shouldHoldBatchResult","documentBuffer_1","releaseBatchResults","promisedAffectedKeys","toReject","affectedKeys","promisedToReject","lastAcked","removeMutationBatch","documentBuffer","changedDocKeys","existingDoc","lastRemoteVersion","remoteVersion","releasedWriteKeys","releaseHeldBatchResults","promisedReleasedWriteKeys","viewChanges","viewChanges_1","nextMutationBatch","afterBatchId","readDocument","cached","documentBuffer_2","garbage","toRelease","isRemoteUpToVersion","batchResults","promiseChain","batchResults_1","applyWriteToRemoteDocuments","affectedDocs","batches_2","docKeys","ackVersion","memory_mutation_queue_MemoryMutationQueue","MemoryMutationQueue","highestAcknowledgedBatchId","batchesByDocumentKey","batchIndex","indexOfExistingBatchId","findMutationBatch","max","rawIndex","indexOfBatchId","getAllLiveMutationBatchesBeforeIndex","endIndex","immediateChildrenPathLength","startPath","rowKeyPath","batchCount","firstBatchId","queueCount","startIndex","queueIndex","length_1","references","memory_query_cache_MemoryQueryCache","MemoryQueryCache","memory_remote_document_cache_MemoryRemoteDocumentCache","MemoryRemoteDocumentCache","iterator","memory_persistence_MemoryPersistence","MemoryPersistence","mutationQueues","queue","MemoryPersistenceTransaction","no_op_garbage_collector_NoOpGarbageCollector","NoOpGarbageCollector","Deferred","backoff_ExponentialBackoff","ExponentialBackoff","initialDelayMs","backoffFactor","maxDelayMs","reset","currentBaseMs","resetToMax","backoffAndWait","def","delayWithJitterMs","jitterDelayMs","persistent_stream___extends","BACKOFF_INITIAL_DELAY_MS","BACKOFF_MAX_DELAY_MS","BACKOFF_FACTOR","persistent_stream_PersistentStream","PersistentStream","connection","credentialsProvider","initialBackoffDelay","idle","stream","backoff","Initial","isStarted","Backoff","Auth","Open","isOpen","performBackoff","auth","stop","Stopped","inhibitBackoff","markIdle","schedule","handleIdleCloseTimer","sendRequest","cancelIdleCheck","finalState","tearDown","getToken","startStream","rpcError","handleStreamClose","dispatchIfStillActive","currentStream_1","startRpc","PersistentListenStream","watchChangeProto","onWatchChange","watch","addTarget","labels","unwatch","removeTarget","persistent_stream_PersistentWriteStream","PersistentWriteStream","handshakeComplete_","writeMutations","responseProto","writeResults","commitTime","onMutationResult","onHandshakeComplete","writeHandshake","writes","datastore_Datastore","Datastore","newPersistentWriteStream","newPersistentWatchStream","params","response","lookup","transaction_Transaction","Transaction","datastore","readVersions","committed","recordVersion","docVersion","existingVersion","preconditionForUpdate","toMutations","unwritten","remote_store_RemoteStore","RemoteStore","onlineStateHandler","pendingWrites","lastBatchSeen","accumulatedWatchChanges","watchStream","writeStream","watchStreamOnlineState","watchStreamFailures","shouldWarnOffline","enableNetwork","updateOnlineState","newState","Healthy","updateOnlineStateAfterFailure","isNetworkEnabled","shouldStartWatchStream","startWatchStream","disableNetwork","disableNetworkInternal","cleanUpWatchStreamState","cleanUpWriteStreamState","sendWatchRequest","sendUnwatchRequest","recordPendingTargetRequest","onWatchStreamOpen","onWatchStreamClose","onWatchStreamChange","handleTargetError","handleWatchChangeBatch","aggregator","deletedDoc","trackedRemote","newQueryData","requestQueryData","canWriteMutations","outstandingWrites","shouldStartWriteStream","startWriteStream","handshakeComplete","onWriteStreamOpen","onWriteStreamClose","onWriteHandshakeComplete","shift","success","errorHandling","handleWriteError","handleHandshakeError","firestore_client_FirestoreClient","FirestoreClient","asyncQueue","usePersistence","initializationDone","persistenceResult","initialized","setUserChangeListener","initializePersistence","initializeRest","startIndexedDbPersistence","canFallback","warn","startMemoryPersistence","storagePrefix","onlineStateChangedHandler","eventMgr","verifyOperationInProgress","removeUserChangeListener","observer","deferred","AsyncObserver","muted","scheduleEvent","mute","eventHandler","async_queue_AsyncQueue","AsyncQueue","tail","delayedOperations","delayedOperationsCount","operationInProgress","delay","stack","delayedOp_1","handle","scheduleInternal","drain","executeDelayedTasks","entry","clearTimeout","User","otherUser","GOOGLE_CREDENTIALS","FIRST_PARTY","OAuthToken","Authorization","EmptyCredentialsProvider","userListener","forceRefresh","credentials_FirebaseCredentialsProvider","FirebaseCredentialsProvider","tokenListener","userCounter","newUser","getUser","addAuthTokenListener","initialUserCounter","tokenData","accessToken","removeAuthTokenListener","getUid","currentUid","credentials_FirstPartyToken","FirstPartyToken","gapi","X-Goog-AuthUser","FirstPartyCredentialsProvider","api_field_value___extends","DeleteFieldValueImpl","serverTimestamp","ServerTimestampFieldValueImpl","PublicFieldValue","RESERVED_FIELD_REGEX","user_data_converter_ParsedSetData","ParsedSetData","user_data_converter_ParsedUpdateData","ParsedUpdateData","user_data_converter_ParseContext","ParseContext","arrayElement","validatePath","childContextForField","childPath","validatePathSegment","childContextForFieldPath","childContextForArray","fieldDescription","user_data_converter_UserDataConverter","UserDataConverter","preConverter","parseSetData","updateData","parseData","parseMergeData","parseUpdateData","fieldMaskPaths","childContext","runPreConverter","parsedValue","mask","parseUpdateVarargs","moreFieldsAndValues","value_1","parseQueryValue","parsed","parseArray","parseObject","parseScalarValue","entryIndex","array_1","parsedEntry","database___extends","DEFAULT_HOST","DEFAULT_SSL","database_FirestoreSettings","FirestoreSettings","settings","FirestoreConfig","Firestore","databaseIdOrApp","_queue","_firestoreClient","drainAsyncQueue","config","firebaseApp","databaseIdFromApp","external_1","_config","_databaseId","settingsLiteral","newSettings","ensureClientConfigured","enablePersistence","configureClient","thisDb","otherDb","_key","_dataConverter","collection","pathString","database_CollectionReference","forPath","database_Transaction","database_WriteBatch","SILENT","level","_firestore","_transaction","database_DocumentSnapshot","fieldOrUpdateData","WriteBatch","_mutations","_committed","verifyNotCommitted","DocumentReference","onSnapshot","includeMetadataChanges","currArg","internalOptions","complete","onSnapshotInternal","errHandler","asyncObserver","internalListener","SnapshotMetadata","DocumentSnapshot","_document","_fromCache","convertObject","convertValue","convertArray","QueryDocumentSnapshot","database_Query","_query","opStr","validateNewFilter","directionStr","validateNewOrderBy","docOrField","boundFromDocOrFields","startAfter","endBefore","boundFromDocument","allFields","boundFromFields","components","rawValue","wrapped","database_QuerySnapshot","firestoreClient","existingField","validateOrderByAndInequalityMatch","inequality","QuerySnapshot","_originalQuery","_snapshot","_cachedChanges","thisArg","convertToDocumentImpl","CollectionReference","parentPath","docRef","PublicFirestore","PublicTransaction","PublicWriteBatch","PublicDocumentReference","PublicDocumentSnapshot","PublicQueryDocumentSnapshot","PublicQuery","PublicQuerySnapshot","PublicCollectionReference","115","global","l","a","aa","ba","propertyIsEnumerable","ca","da","fa","ha","unshift","r","Function","ia","u","H","Cb","ja","captureStackTrace","ka","ma","na","oa","w","qa","ra","ea","va","wa","xa","ya","y","x","Ba","Ca","Da","Ea","Ga","Fa","Ha","Ia","Ja","Oa","documentMode","Ta","la","Pa","h","parseInt","A","$a","relatedTarget","button","screenY","screenX","clientY","clientX","metaKey","shiftKey","altKey","ctrlKey","pointerId","pointerType","changedTouches","srcElement","Ma","nodeName","fromElement","toElement","pageX","pageY","ab","defaultPrevented","bb","eb","src","capture","ga","Y","fb","gb","ib","sa","jb","hb","nb","once","ob","pb","qb","rb","kb","sb","Za","attachEvent","tb","addListener","removeListener","mb","ub","Xa","vb","wb","detachEvent","lb","xb","yb","keyCode","returnValue","parentNode","zb","handleEvent","B","P","K","Ab","Bb","eval","Db","Eb","Fb","Boolean","Gb","valueOf","Ib","Hb","Jb","Kb","Ob","Pb","Lb","Qb","Sb","MessageChannel","postMessage","createElement","style","display","documentElement","appendChild","contentWindow","location","protocol","origin","port1","onmessage","port2","za","onreadystatechange","removeChild","Ub","Tb","Vb","setImmediate","Window","Rb","Nb","Wb","Xb","g","t","Yb","$","L","Zb","$b","ac","X","C","cc","dc","fc","D","lc","oc","nc","mc","jc","lastIndexOf","E","hc","pc","ic","F","kc","qc","rc","G","Z","Mb","sc","tc","uc","vc","I","wc","xc","parse","zc","Ac","yc","dispatchEvent","Bc","J","Cc","Dc","Ec","Hc","Ic","Jc","Lc","Mc","ActiveXObject","XMLHttpRequest","T","N","S","Nc","Oc","j","U","o","M","Pc","Sc","Tc","Uc","Vc","Wc","Xc","Qa","Yc","W","Ka","V","Zc","$c","ad","bd","cd","dd","ed","Rc","Qc","fd","gd","hd","ta","O","jd","kd","md","decodeURIComponent","nd","od","pd","qd","rd","match","ld","sd","td","zd","ud","Ad","Q","Bd","abs","Cd","Dd","decodeURI","encodeURI","Ed","R","Gd","Fd","Hd","toLowerCase","Id","Kd","Jd","Ld","Md","Od","Pd","Qd","Rd","Sd","Td","Vd","Wd","Xd","Yd","Zd","pa","$d","ae","be","ce","de","ee","fe","ge","he","ie","encodeURIComponent","je","Image","onload","ke","ontimeout","le","qe","z","timeout","oe","re","se","te","goog","La","self","me","pe","readyState","ue","ve","we","Ua","concurrentRequestLimit","fastHandshake","xe","ye","ze","sendBeacon","Ae","cancel","Be","Ce","De","Ee","Fe","He","Ge","round","Va","Ie","Na","Je","Ke","Ud","Aa","Le","hostname","port","Me","Ne","Oe","testUrl","messageUrlParams","messageHeaders","clientProtocolHeaderRequired","X-Client-Protocol","messageContentType","X-WebChannel-Content-Type","Pe","Qe","__sm__","Re","Te","Ue","Ve","We","Xe","Ye","Ze","$e","af","trim","Ra","Sa","parseFloat","compatMode","Wa","freeze","Ya","2","3","4","preventDefault","\"","\\","/","\b","\f","\n","\r","\t","\u000b","bc","ec","Fc","Gc","Kc","vd","wd","xd","yd","Nd","getResponseHeader","ne","toUpperCase","FormData","setRequestHeader","responseType","withCredentials","statusText","responseText","__data__","Se","createWebChannelTransport","ErrorCode","WebChannel","XhrIoPool"],"mappings":"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","file":"firebase-firestore.js","sourcesContent":["/*!\n * @license Firebase v4.9.0\n * Build: rev-a586a7f\n * Terms: https://firebase.google.com/terms/\n */\ntry {\n        webpackJsonpFirebase([1],{\n\n/***/ 113:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n__webpack_require__(114);\n\n\n/***/ }),\n\n/***/ 114:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ../app/dist/esm/index.js + 1 modules\nvar esm = __webpack_require__(6);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = esm[\"default\"].SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/log.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\n\n\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n    return logLevel;\n}\nfunction setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nfunction debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nfunction log_error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = platform_PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/assert.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    log_error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nfunction assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar platform_PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\n\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nfunction emptyByteString() {\n    return platform_PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nvar Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\n\n\n//# sourceMappingURL=error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/api.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nfunction makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nfunction obj_size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nfunction defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nfunction forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = Number(key);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nfunction forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nfunction lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nfunction isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/input_validation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nfunction validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nfunction validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nfunction validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nfunction validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nfunction validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {\n    var expectedDescription = [];\n    for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {\n        var val = expected_1[_i];\n        if (val === input) {\n            return;\n        }\n        expectedDescription.push(valueDescription(val));\n    }\n    var actualDescription = valueDescription(input);\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid value \" + actualDescription + \" provided to function \" + functionName + \"() for option \\\"serverTimestamps\\\". Acceptable values: \" + expectedDescription.join(', '));\n}\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nfunction validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {\n    if (input !== undefined) {\n        validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nfunction isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nfunction validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nfunction validateOptionNames(functionName, options, optionNames) {\n    forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nfunction invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/misc.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:class-as-namespace\nvar misc_AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\n\nfunction primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using isEqual(). */\nfunction equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.isEqual(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using isEqual(). */\nfunction arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nfunction immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nfunction immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/blob.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!platform_PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar blob_Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = platform_PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return platform_PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    Blob.prototype.isEqual = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nvar PublicBlob = makeConstructorPrivate(blob_Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/geo_point.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar geo_point_GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GeoPoint.prototype.isEqual = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\n\n\n//# sourceMappingURL=geo_point.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/database_info.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\n\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar database_info_DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.isEqual = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\n\n\n//# sourceMappingURL=database_info.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar path___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar path_Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.isEqual = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar path_ResourcePath = /** @class */ (function (_super) {\n    path___extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(path_Path));\n\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar path_FieldPath = /** @class */ (function (_super) {\n    path___extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(path_Path));\n\n\n//# sourceMappingURL=path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_key.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_key_DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.isEqual = function (other) {\n        return (other !== null && path_ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return path_ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new path_ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(path_ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new path_ResourcePath([]));\n    return DocumentKey;\n}());\n\n\n//# sourceMappingURL=document_key.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.isEqual = function (other) {\n        return (other instanceof Document &&\n            this.key.isEqual(other.key) &&\n            this.version.isEqual(other.version) &&\n            this.data.isEqual(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar document_NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.isEqual = function (other) {\n        return (other &&\n            other.version.isEqual(this.version) &&\n            other.key.isEqual(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\n\n\n//# sourceMappingURL=document.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar sorted_map_SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : sorted_map_LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    // Returns an iterator over the SortedMap.\n    SortedMap.prototype.getIterator = function () {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, false);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, false);\n    };\n    SortedMap.prototype.getReverseIterator = function () {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, true);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, true);\n    };\n    return SortedMap;\n}()); // end SortedMap\n\n// An iterator over an LLRBNode.\nvar sorted_map_SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse) {\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        return { key: node.key, value: node.value };\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nvar sorted_map_LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new sorted_map_LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\n\nsorted_map_LLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar field_value___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/** Defines the return value for pending server timestamps. */\nvar ServerTimestampBehavior;\n(function (ServerTimestampBehavior) {\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Default\"] = 0] = \"Default\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Estimate\"] = 1] = \"Estimate\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Previous\"] = 2] = \"Previous\";\n})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));\n/** Holds properties that define field value deserialization options. */\nvar field_value_FieldValueOptions = /** @class */ (function () {\n    function FieldValueOptions(serverTimestampBehavior) {\n        this.serverTimestampBehavior = serverTimestampBehavior;\n    }\n    FieldValueOptions.fromSnapshotOptions = function (options) {\n        switch (options.serverTimestamps) {\n            case 'estimate':\n                return new FieldValueOptions(ServerTimestampBehavior.Estimate);\n            case 'previous':\n                return new FieldValueOptions(ServerTimestampBehavior.Previous);\n            case 'none': // Fall-through intended.\n            case undefined:\n                return FieldValueOptions.defaultOptions;\n            default:\n                return fail('fromSnapshotOptions() called with invalid options.');\n        }\n    };\n    FieldValueOptions.defaultOptions = new FieldValueOptions(ServerTimestampBehavior.Default);\n    return FieldValueOptions;\n}());\n\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar field_value_FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\n\nvar NullValue = /** @class */ (function (_super) {\n    field_value___extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function (options) {\n        return null;\n    };\n    NullValue.prototype.isEqual = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(field_value_FieldValue));\n\nvar field_value_BooleanValue = /** @class */ (function (_super) {\n    field_value___extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.isEqual = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(field_value_FieldValue));\n\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    field_value___extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(field_value_FieldValue));\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    field_value___extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\n\nvar DoubleValue = /** @class */ (function (_super) {\n    field_value___extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\n\n// TODO(b/37267885): Add truncation support\nvar field_value_StringValue = /** @class */ (function (_super) {\n    field_value___extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    StringValue.prototype.isEqual = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(field_value_FieldValue));\n\nvar TimestampValue = /** @class */ (function (_super) {\n    field_value___extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function (options) {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(field_value_FieldValue));\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    field_value___extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime, previousValue) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.previousValue = previousValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function (options) {\n        if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {\n            return this.localWriteTime.toDate();\n        }\n        else if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {\n            return this.previousValue ? this.previousValue.value(options) : null;\n        }\n        else {\n            return null;\n        }\n    };\n    ServerTimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.isEqual(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(field_value_FieldValue));\n\nvar BlobValue = /** @class */ (function (_super) {\n    field_value___extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BlobValue.prototype.isEqual = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(field_value_FieldValue));\n\nvar field_value_RefValue = /** @class */ (function (_super) {\n    field_value___extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function (options) {\n        return this.key;\n    };\n    RefValue.prototype.isEqual = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : document_key_DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(field_value_FieldValue));\n\nvar GeoPointValue = /** @class */ (function (_super) {\n    field_value___extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.isEqual = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(field_value_FieldValue));\n\nvar field_value_ObjectValue = /** @class */ (function (_super) {\n    field_value___extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function (options) {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value(options);\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.isEqual = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new sorted_map_SortedMap(primitiveComparator));\n    return ObjectValue;\n}(field_value_FieldValue));\n\nvar field_value_ArrayValue = /** @class */ (function (_super) {\n    field_value___extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function (options) {\n        return this.internalValue.map(function (v) { return v.value(options); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.isEqual = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].isEqual(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(field_value_FieldValue));\n\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nvar isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nfunction isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nfunction safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/query.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar query_Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new query_OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.isEqual(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof query_RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.isEqual = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].isEqual(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.isEqual(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.isEqual(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.isEqual(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof query_RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return document_key_DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (document_key_DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.isEqual(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\n\nvar query_RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.isEqual = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\n\nvar query_RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof field_value_RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = document_key_DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case query_RelationOp.LESS_THAN:\n                return comparison < 0;\n            case query_RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case query_RelationOp.EQUAL:\n                return comparison === 0;\n            case query_RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case query_RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== query_RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.isEqual = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.isEqual(other.op) &&\n                this.field.isEqual(other.field) &&\n                this.value.isEqual(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\n\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.isEqual = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\n\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.isEqual = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\n\n/**\n * Creates a filter based on the provided arguments.\n */\nfunction fieldFilter(field, op, value) {\n    if (value.isEqual(NullValue.INSTANCE)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.isEqual(DoubleValue.NAN)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new query_RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar query_Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof field_value_RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = document_key_DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.isEqual = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.isEqual(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar query_OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? document_Document.compareByKey(d1, d2)\n            : document_Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.isEqual = function (other) {\n        return this.dir === other.dir && this.field.isEqual(other.field);\n    };\n    return OrderBy;\n}());\n\nvar KEY_ORDERING_ASC = new query_OrderBy(path_FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new query_OrderBy(path_FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/timestamp.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar timestamp_Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = Number(nanoStr);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.isEqual = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\n\n\n//# sourceMappingURL=timestamp.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/snapshot_version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar snapshot_version_SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new timestamp_Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.isEqual = function (other) {\n        return this.timestamp.isEqual(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new timestamp_Timestamp(0, 0));\n    return SnapshotVersion;\n}());\n\n\n//# sourceMappingURL=snapshot_version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/query_data.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** An enumeration of the different purposes we have for queries. */\nvar QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar query_data_QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = snapshot_version_SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.isEqual = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.isEqual(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.isEqual(other.query));\n    };\n    return QueryData;\n}());\n\n\n//# sourceMappingURL=query_data.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar mutation___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar mutation_FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.isEqual = function (other) {\n        return arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\n\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.isEqual = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\n\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.isEqual = function (other) {\n        return (this.field.isEqual(other.field) && this.transform.isEqual(other.transform));\n    };\n    return FieldTransform;\n}());\n\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n         * The version at which the mutation was committed or null for a delete.\n         */\n        version, \n        /**\n         * The resulting fields returned from the backend after a\n         * TransformMutation has been committed. Contains one FieldValue for each\n         * FieldTransform that was in the mutation.\n         *\n         * Will be null if the mutation was not a TransformMutation.\n         */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\n\nvar MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar mutation_Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof document_Document &&\n                maybeDoc.version.isEqual(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof document_Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof document_NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.isEqual = function (other) {\n        return (equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar mutation_Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar mutation_SetMutation = /** @class */ (function (_super) {\n    mutation___extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.isEqual = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.isEqual(other.key) &&\n            this.value.isEqual(other.value) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return SetMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar mutation_PatchMutation = /** @class */ (function (_super) {\n    mutation___extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.isEqual = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.isEqual(other.key) &&\n            this.fieldMask.isEqual(other.fieldMask) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof document_Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = field_value_ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar mutation_TransformMutation = /** @class */ (function (_super) {\n    mutation___extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = mutation_Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime, baseDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.isEqual = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.isEqual(other.key) &&\n            arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof document_Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @param baseDoc The document prior to applying this mutation batch.\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                var previousValue = null;\n                if (baseDoc instanceof document_Document) {\n                    previousValue = baseDoc.field(fieldTransform.field) || null;\n                }\n                transformResults.push(new ServerTimestampValue(localWriteTime, previousValue));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(mutation_Mutation));\n\n/** A mutation that deletes the document at the given key. */\nvar mutation_DeleteMutation = /** @class */ (function (_super) {\n    mutation___extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.isEqual = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.isEqual(other.key) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return DeleteMutation;\n}(mutation_Mutation));\n\n\n//# sourceMappingURL=mutation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/existence_filter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.isEqual = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\n\n\n//# sourceMappingURL=existence_filter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/rpc_error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nfunction isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nfunction mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nfunction mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log_error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nfunction mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar sorted_set_SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new sorted_map_SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.isEqual = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\n\n\n//# sourceMappingURL=sorted_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/collections.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar EMPTY_MAYBE_DOCUMENT_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new sorted_set_SortedSet(document_key_DocumentKey.comparator);\nfunction documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_event.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar remote_event_RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n         * The snapshot version this event brings us up to, or MIN if not set.\n         */\n        snapshotVersion, \n        /**\n         * A map from target to changes to the target. See TargetChange.\n         */\n        targetChanges, \n        /**\n         * A set of which documents have changed or been deleted, along with the\n         * doc's new values (if not deleted).\n         */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: snapshot_version_SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nvar CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.isEqual = function (other) {\n        return other !== null && this.docs.isEqual(other.docs);\n    };\n    return ResetMapping;\n}());\n\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.isEqual = function (other) {\n        return (other !== null &&\n            this.addedDocuments.isEqual(other.addedDocuments) &&\n            this.removedDocuments.isEqual(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\n\n\n//# sourceMappingURL=remote_event.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/watch_change.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n         * The new document or NoDocument if it was deleted. Is null if the\n         * document went out of view without the server sending a new document.\n         */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\n\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\n\nvar WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar watch_change_WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar watch_change_WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof watch_change_WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new remote_event_RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!contains(this.pendingTargetResponses, targetId) &&\n            contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\n\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[query_RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[query_RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[query_RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[query_RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[query_RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return Number(value);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar serializer_JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!isNullOrUndefined(val)) {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return timestamp_Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new timestamp_Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return blob_Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return blob_Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return snapshot_version_SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = path_ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new document_key_DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return path_ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new path_ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new path_ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof field_value_BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof field_value_StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof field_value_ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof field_value_ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof field_value_RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return field_value_BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new field_value_StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new field_value_ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new GeoPointValue(new geo_point_GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new database_info_DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new document_key_DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new field_value_RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new document_Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = field_value_ObjectValue.EMPTY;\n        forEach(map, function (key, value) {\n            result = result.set(new path_FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new document_Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new document_NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof document_Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof document_NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof watch_change_WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new watch_change_WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new document_Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : snapshot_version_SnapshotVersion.forDeletedDoc();\n            var doc = new document_NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof mutation_SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof mutation_DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof mutation_PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof mutation_TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : mutation_Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new mutation_PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new mutation_SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new mutation_DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new mutation_TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return mutation_Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return mutation_Precondition.exists(precondition.exists);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = path_FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return query_Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(path_ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new query_Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof query_RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new query_Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return query_RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return query_RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return query_RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return query_RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return query_RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return path_FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new query_OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof query_RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new query_RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return path_FieldPath.fromServerFormat(path); });\n        return new mutation_FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\n\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n// EXTERNAL MODULE: ../webchannel-wrapper/dist/index.js\nvar dist = __webpack_require__(115);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/stream_bridge.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar stream_bridge_StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\n\n\n//# sourceMappingURL=stream_bridge.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar webchannel_connection_WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new dist[\"XhrIoPool\"]();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            // tslint:disable-next-line:no-any XhrIoPool doesn't have TS typings.\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(dist[\"EventType\"].COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case dist[\"ErrorCode\"].NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case dist[\"ErrorCode\"].TIMEOUT:\n                                debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case dist[\"ErrorCode\"].HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = Object(dist[\"createWebChannelTransport\"])();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        var streamBridge = new stream_bridge_StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(dist[\"WebChannel\"].EventType.OPEN, function () {\n            if (!closed) {\n                debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = \n                // tslint:disable-next-line:no-any msgData.error is not typed.\n                msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\n\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar browser_platform_BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new webchannel_connection_WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new serializer_JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\n\n\n//# sourceMappingURL=browser_platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_init.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nplatform_PlatformSupport.setPlatform(new browser_platform_BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar field_path_FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new path_FieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    FieldPath.prototype.isEqual = function (other) {\n        if (!(other instanceof FieldPath)) {\n            throw invalidClassError('isEqual', 'FieldPath', 1, other);\n        }\n        return this._internalPath.isEqual(other._internalPath);\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(path_FieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nfunction fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (field_path_FieldPath.bind.apply(field_path_FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Describes the online state of the Firestore client. Note that this does not\n * indicate whether or not the remote store is trying to connect or not. This is\n * primarily used by the View / EventManager code to change their behavior while\n * offline (e.g. get() calls shouldn't wait for data from the server and\n * snapshot events should set metadata.isFromCache=true).\n */\nvar OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it is currently\n     * trying to establish a connection, but it has not succeeded or failed yet.\n     * Higher-level components should not operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * successful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client is either trying to establish a connection but failing, or it\n     * has been explicitly marked offline via a call to disableNetwork().\n     * Higher-level components should operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view_snapshot.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nvar SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar view_snapshot_DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\n\nvar ViewSnapshot = /** @class */ (function () {\n    function ViewSnapshot(query, docs, oldDocs, docChanges, fromCache, hasPendingWrites, syncStateChanged) {\n        this.query = query;\n        this.docs = docs;\n        this.oldDocs = oldDocs;\n        this.docChanges = docChanges;\n        this.fromCache = fromCache;\n        this.hasPendingWrites = hasPendingWrites;\n        this.syncStateChanged = syncStateChanged;\n    }\n    ViewSnapshot.prototype.isEqual = function (other) {\n        if (this.fromCache !== other.fromCache ||\n            this.hasPendingWrites !== other.hasPendingWrites ||\n            this.syncStateChanged !== other.syncStateChanged ||\n            !this.query.isEqual(other.query) ||\n            !this.docs.isEqual(other.docs) ||\n            !this.oldDocs.isEqual(other.oldDocs)) {\n            return false;\n        }\n        var changes = this.docChanges;\n        var otherChanges = other.docChanges;\n        if (changes.length !== otherChanges.length) {\n            return false;\n        }\n        for (var i = 0; i < changes.length; i++) {\n            if (changes[i].type !== otherChanges[i].type ||\n                !changes[i].doc.isEqual(otherChanges[i].doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ViewSnapshot;\n}());\n\n\n//# sourceMappingURL=view_snapshot.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar document_set_DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new sorted_map_SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.isEqual(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\n\n\n//# sourceMappingURL=document_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar obj_map_ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.isEqual(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\n\n\n//# sourceMappingURL=obj_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/event_manager.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar event_manager_EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.applyOnlineStateChange(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.applyOnlineStateChange(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar event_manager_QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.fromCache, snap.hasPendingWrites, snap.syncStateChanged);\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = new ViewSnapshot(snap.query, snap.docs, document_set_DocumentSet.emptySet(snap.docs), QueryListener.getInitialViewChanges(snap), snap.fromCache, snap.hasPendingWrites, true);\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\n\n\n//# sourceMappingURL=event_manager.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/persistence_promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar persistence_promise_PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.\n        this.nextCallback = null;\n        // tslint:disable-next-line:no-any Accept any result type for the error handler.\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = undefined;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            // tslint:disable-next-line:no-any\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (\n        // tslint:disable-next-line:no-any Accept all Promise types in waitFor().\n        all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        // tslint:disable-next-line:no-any\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\n\n\n//# sourceMappingURL=persistence_promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/eager_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar eager_garbage_collector_EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return persistence_promise_PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = persistence_promise_PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return persistence_promise_PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\n\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_view_changes.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar local_view_changes_LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\n\n\n//# sourceMappingURL=local_view_changes.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/reference_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar reference_set_ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new sorted_set_SortedSet(reference_set_DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new reference_set_DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new reference_set_DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(firstRef !== null && key.isEqual(firstRef.key));\n    };\n    return ReferenceSet;\n}());\n\nvar reference_set_DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (document_key_DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            document_key_DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\n\n\n//# sourceMappingURL=reference_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/target_id_generator.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\n\n\n//# sourceMappingURL=target_id_generator.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\n\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar view_View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new document_set_DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new view_snapshot_DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof document_Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.isEqual(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, newSyncState === SyncState.Local, !docChanges.mutatedKeys.isEmpty(), syncStateChanged);\n            return {\n                snapshot: snap,\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Applies an OnlineState change to the view, potentially generating a\n     * ViewChange if the view's syncState changes as a result.\n     */\n    View.prototype.applyOnlineStateChange = function (onlineState) {\n        if (this.current && onlineState === OnlineState.Failed) {\n            // If we're offline, set `current` to false and then call applyChanges()\n            // to refresh our syncState and generate a ViewChange as appropriate. We\n            // are guaranteed to get a new TargetChange that sets `current` back to\n            // true once the client is back online.\n            this.current = false;\n            return this.applyChanges({\n                documentSet: this.documentSet,\n                changeSet: new view_snapshot_DocumentChangeSet(),\n                mutatedKeys: this.mutatedKeys,\n                needsRefill: false\n            });\n        }\n        else {\n            // No effect, just return a no-op ViewChange.\n            return { limboChanges: [] };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\n\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/sync_engine.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar sync_engine_LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar sync_engine_SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new reference_set_ReferenceSet();\n        this.limboCollector = new eager_garbage_collector_EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new view_View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new document_NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    /**\n     * Applies an OnlineState change to the sync engine and notifies any views of\n     * the change.\n     */\n    SyncEngine.prototype.applyOnlineStateChange = function (onlineState) {\n        var newViewSnapshots = [];\n        this.queryViewsByQuery.forEach(function (query, queryView) {\n            var viewChange = queryView.view.applyOnlineStateChange(onlineState);\n            assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');\n            if (viewChange.snapshot) {\n                newViewSnapshots.push(viewChange.snapshot);\n            }\n        });\n        this.viewHandler(newViewSnapshots);\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new document_NoDocument(limboKey, snapshot_version_SnapshotVersion.forDeletedDoc()));\n            var event_1 = new remote_event_RemoteEvent(snapshot_version_SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new sorted_map_SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                debug(sync_engine_LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            debug(sync_engine_LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = query_Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new query_data_QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = local_view_changes_LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\n\n\n//# sourceMappingURL=sync_engine.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation_batch.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar mutation_batch_MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var baseDoc = maybeDoc;\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.isEqual = function (other) {\n        return (this.batchId === other.batchId &&\n            arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\n\n/** The result of applying a mutation batch to the backend. */\nvar mutation_batch_MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\n\n\n//# sourceMappingURL=mutation_batch.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/encoded_resource_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nfunction encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nfunction decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return path_ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new path_ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nfunction prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_schema.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nfunction createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(DbMutationBatch.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(indexeddb_schema_DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n         * The normalized user ID to which this queue belongs.\n         */\n        userId, \n        /**\n         * An identifier for the highest numbered batch that has been acknowledged\n         * by the server. All MutationBatches in this queue with batchIds less\n         * than or equal to this value are considered to have been acknowledged by\n         * the server.\n         */\n        lastAcknowledgedBatchId, \n        /**\n         * A stream token that was previously sent by the server.\n         *\n         * See StreamingWriteRequest in datastore.proto for more details about\n         * usage.\n         *\n         * After sending this token, earlier tokens may not be used anymore so\n         * only a single stream token is retained.\n         */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n         * The normalized user ID to which this batch belongs.\n         */\n        userId, \n        /**\n         * An identifier for this batch, allocated by the mutation queue in a\n         * monotonically increasing manner.\n         */\n        batchId, \n        /**\n         * The local write time of the batch, stored as milliseconds since the\n         * epoch.\n         */\n        localWriteTimeMs, \n        /**\n         * A list of mutations to apply. All mutations will be applied atomically.\n         *\n         * Mutations are serialized via JsonProtoSerializer.toMutation().\n         */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar indexeddb_schema_DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n         * Set to an instance of a DbNoDocument if it is known that no document\n         * exists.\n         */\n        noDocument, \n        /**\n         * Set to an instance of a Document if there's a cached version of the\n         * document.\n         */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n         * An auto-generated sequential numeric identifier for the query.\n         *\n         * Queries are stored using their canonicalId as the key, but these\n         * canonicalIds can be quite long so we additionally assign a unique\n         * queryId which can be used by referenced data structures (e.g.\n         * indexes) to minimize the on-disk cost.\n         */\n        targetId, \n        /**\n         * The canonical string representing this query. This is not unique.\n         */\n        canonicalId, \n        /**\n         * The last readTime received from the Watch Service for this query.\n         *\n         * This is the same value as TargetChange.read_time in the protos.\n         */\n        readTime, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data\n         * that matches the query. The resume token essentially identifies a\n         * point in time from which the server should resume sending results.\n         *\n         * This is related to the snapshotVersion in that the resumeToken\n         * effectively also encodes that value, but the resumeToken is opaque\n         * and sometimes encodes additional information.\n         *\n         * A consequence of this is that the resumeToken should be used when\n         * asking the server to reason about where this client is in the watch\n         * stream, but the client should use the snapshotVersion for its own\n         * purposes.\n         *\n         * This is the same value as TargetChange.resume_token in the protos.\n         */\n        resumeToken, \n        /**\n         * A sequence number representing the last time this query was\n         * listened to, used for garbage collection purposes.\n         *\n         * Conventionally this would be a timestamp value, but device-local\n         * clocks are unreliable and they must be able to create new listens\n         * even while disconnected. Instead this should be a monotonically\n         * increasing number that's incremented on each listen call.\n         *\n         * This is different from the queryId since the queryId is an\n         * immutable identifier assigned to the Query on first use while\n         * lastListenSequenceNumber is updated every time the query is\n         * listened to.\n         */\n        lastListenSequenceNumber, \n        /**\n         * The query for this target.\n         *\n         * Because canonical ids are not unique we must store the actual query. We\n         * use the proto to have an object we can persist without having to\n         * duplicate translation logic to and from a `Query` object.\n         */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\n\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n         * The targetId identifying a target.\n         */\n        targetId, \n        /**\n         * The path to the document, as encoded in the key.\n         */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n         * The highest numbered target id across all targets.\n         *\n         * See DbTarget.targetId.\n         */\n        highestTargetId, \n        /**\n         * The highest numbered lastListenSequenceNumber across all targets.\n         *\n         * See DbTarget.lastListenSequenceNumber.\n         */\n        highestListenSequenceNumber, \n        /**\n         * A global snapshot version representing the last consistent snapshot we\n         * received from the backend. This is monotonically increasing and any\n         * snapshots received from the backend prior to this version (e.g. for\n         * targets resumed with a resumeToken) should be suppressed (buffered)\n         * until the backend has caught up to this snapshot version again. This\n         * prevents our cache from ever going backwards in time.\n         */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\n\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nvar ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    indexeddb_schema_DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/simple_db.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar simple_db_LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar simple_db_SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(simple_db_LOG_TAG, 'Opening database:', name);\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(simple_db_LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(simple_db_LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new simple_db_SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return persistence_promise_PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar simple_db_SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(simple_db_LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new simple_db_SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar simple_db_SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(simple_db_LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(simple_db_LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(simple_db_LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof persistence_promise_PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return persistence_promise_PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new persistence_promise_PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar indexeddb_mutation_queue_IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n         * The normalized userId (e.g. null UID => \"\" userId) used to store /\n         * retrieve mutations.\n         */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = encode(mutation.key.path);\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, indexeddb_schema_DbDocumentMutation.PLACEHOLDER);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(indexeddb_schema_DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\n\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, indexeddb_schema_DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_query_cache_IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, snapshot_version_SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.fromTimestamp(new timestamp_Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return persistence_promise_PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.isEqual(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = decode(key[1]);\n                var docKey = new document_key_DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return persistence_promise_PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = decode(key[1]);\n            var docKey = new document_key_DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction indexeddb_query_cache_getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** Serializer for values stored in the LocalStore. */\nvar local_serializer_LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = document_key_DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new timestamp_Timestamp(readTime.seconds, readTime.nanos);\n            return new document_NoDocument(key, snapshot_version_SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = timestamp_Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new mutation_batch_MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new timestamp_Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = snapshot_version_SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new query_data_QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_persistence_LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar indexeddb_persistence_IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new local_serializer_LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return simple_db_SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return indexeddb_mutation_queue_IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new indexeddb_query_cache_IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        debug(indexeddb_persistence_LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return simple_db_SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    debug(indexeddb_persistence_LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    debug(indexeddb_persistence_LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    debug(indexeddb_persistence_LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log_error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log_error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            debug(indexeddb_persistence_LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return misc_AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\n\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_documents_view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar local_documents_view_LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new document_NoDocument(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (document_key_DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new document_key_DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof document_Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof document_Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof document_Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof document_NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\n\n\n//# sourceMappingURL=local_documents_view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar remote_document_change_buffer_RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return persistence_promise_PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\n\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar local_store_LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar local_store_LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n         * The garbage collector collects documents that should no longer be\n         * cached (e.g. if they are no longer retained by the above reference sets\n         * and the garbage collector is performing eager collection).\n         */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new reference_set_ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new local_documents_view_LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new local_documents_view_LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = timestamp_Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new remote_document_change_buffer_RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.isEqual(snapshot_version_SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        debug(local_store_LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.isEqual(snapshot_version_SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return persistence_promise_PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new query_data_QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return persistence_promise_PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return persistence_promise_PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\n\n\n//# sourceMappingURL=local_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nvar memory_mutation_queue_MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new reference_set_DocReference(mutation.key, batchId));\n        }\n        return persistence_promise_PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return persistence_promise_PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return persistence_promise_PersistencePromise.resolve(batch);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new reference_set_DocReference(documentKey, 0);\n        var end = new reference_set_DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.isEqual(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!document_key_DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new reference_set_DocReference(new document_key_DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new reference_set_DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\n\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_query_cache_MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new obj_map_ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new reference_set_ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return persistence_promise_PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\n\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_remote_document_cache_MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return persistence_promise_PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new document_key_DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\n\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar memory_persistence_LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar memory_persistence_MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new memory_remote_document_cache_MemoryRemoteDocumentCache();\n        this.queryCache = new memory_query_cache_MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new memory_mutation_queue_MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(memory_persistence_LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar no_op_garbage_collector_NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return persistence_promise_PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\n\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nfunction sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/backoff.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar backoff_LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar backoff_ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n         * The initial delay (used as the base delay on the first retry attempt).\n         * Note that jitter will still be applied, so the actual delay could be as\n         * little as 0.5*initialDelayMs.\n         */\n        initialDelayMs, \n        /**\n         * The multiplier to use to determine the extended base delay after each\n         * attempt.\n         */\n        backoffFactor, \n        /**\n         * The maximum base delay after which no further backoff is performed.\n         * Note that jitter will still be applied, so the actual delay could be as\n         * much as 1.5*maxDelayMs.\n         */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            debug(backoff_LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\n\n\n//# sourceMappingURL=backoff.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/persistent_stream.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar persistent_stream___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar persistent_stream_LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar persistent_stream_PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.idle = false;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new backoff_ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Initializes the idle timer. If no write takes place within one minute, the\n     * WebChannel stream will be closed.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        this.idle = true;\n        this.queue\n            .schedule(function () {\n            return _this.handleIdleCloseTimer();\n        }, IDLE_TIMEOUT_MS)\n            .catch(function (err) {\n            // When the AsyncQueue gets drained during testing, pending Promises\n            // (including these idle checks) will get rejected. We special-case\n            // these cancelled idle checks to make sure that these specific Promise\n            // rejections are not considered unhandled.\n            assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n        });\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        if (this.isOpen() && this.idle) {\n            // When timing out an idle stream there's no reason to force the stream into backoff when\n            // it restarts so set the stream state to Initial instead of Error.\n            return this.close(PersistentStreamState.Initial);\n        }\n        return Promise.resolve();\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        this.idle = false;\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n        this.cancelIdleCheck();\n        if (finalState !== PersistentStreamState.Error) {\n            // If this is an intentional close ensure we don't delay our next connection attempt.\n            this.backoff.reset();\n        }\n        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n            log_error(error.toString());\n            log_error('Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        // Clean up the underlying stream because we are no longer interested in events.\n        if (this.stream !== null) {\n            this.tearDown();\n            this.stream.close();\n            this.stream = null;\n        }\n        // This state must be assigned before calling onClose() to allow the callback to\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\n        this.state = finalState;\n        var listener = this.listener;\n        // Clear the listener to avoid bleeding of events from the underlying streams.\n        this.listener = null;\n        // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n        // could trigger undesirable recovery logic, etc.).\n        if (finalState !== PersistentStreamState.Stopped) {\n            return listener.onClose(error);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the stream instance has not changed\n                if (_this.stream === stream) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start(listener);\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        debug(persistent_stream_LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    persistent_stream___extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(persistent_stream_PersistentStream));\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar persistent_stream_PersistentWriteStream = /** @class */ (function (_super) {\n    persistent_stream___extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(persistent_stream_PersistentStream));\n\n\n//# sourceMappingURL=persistent_stream.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/datastore.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar datastore_Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new persistent_stream_PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\n\n\n//# sourceMappingURL=datastore.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/transaction.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar transaction_Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof document_NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = snapshot_version_SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.isEqual(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.isEqual(snapshot_version_SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return mutation_Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new mutation_DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\n\n\n//# sourceMappingURL=transaction.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar remote_store_LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar remote_store_RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    /**\n     * Updates our OnlineState to the new state, updating local state\n     * and notifying the onlineStateHandler as appropriate. Idempotent.\n     */\n    RemoteStore.prototype.updateOnlineState = function (newState) {\n        if (newState !== this.watchStreamOnlineState) {\n            if (newState === OnlineState.Healthy) {\n                // We've connected to watch at least once. Don't warn the developer about\n                // being offline going forward.\n                this.shouldWarnOffline = false;\n            }\n            else if (newState === OnlineState.Unknown) {\n                // The state is set to unknown when a healthy stream is closed (e.g. due to\n                // a token timeout) or when we have no active listens and therefore there's\n                // no need to start the stream. Assuming there is (possibly in the future)\n                // an active listen, then we will eventually move to state Online or Failed,\n                // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n                // attempts before failing, so we reset the count here.\n                this.watchStreamFailures = 0;\n            }\n            this.watchStreamOnlineState = newState;\n            this.onlineStateHandler(newState);\n        }\n    };\n    /**\n     * Updates our OnlineState as appropriate after the watch stream reports a\n     * failure. The first failure moves us to the 'Unknown' state. We then may\n     * allow multiple failures (based on ONLINE_ATTEMPTS_BEFORE_FAILURE) before we\n     * actually transition to OnlineState.Failed.\n     */\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.updateOnlineState(OnlineState.Unknown);\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log_error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) === (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Idempotent. */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        if (this.isNetworkEnabled()) {\n            return Promise.resolve();\n        }\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /**\n     * Temporarily disables the network. The network can be re-enabled using\n     * enableNetwork().\n     */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.disableNetworkInternal();\n        // Set the OnlineState to failed so get()'s return from cache, etc.\n        this.updateOnlineState(OnlineState.Failed);\n        return Promise.resolve();\n    };\n    /**\n     * Disables the network, if it is currently enabled.\n     */\n    RemoteStore.prototype.disableNetworkInternal = function () {\n        if (this.isNetworkEnabled()) {\n            // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n            // event).\n            this.watchStream.stop();\n            this.writeStream.stop();\n            this.cleanUpWatchStreamState();\n            this.cleanUpWriteStreamState();\n            this.writeStream = null;\n            this.watchStream = null;\n        }\n    };\n    RemoteStore.prototype.shutdown = function () {\n        debug(remote_store_LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetworkInternal();\n        // Set the OnlineState to Unknown (rather than Failed) to avoid potentially\n        // triggering spurious listener events with cached data, etc.\n        this.updateOnlineState(OnlineState.Unknown);\n        return Promise.resolve();\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.updateOnlineState(OnlineState.Unknown);\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.updateOnlineState(OnlineState.Healthy);\n        if (watchChange instanceof watch_change_WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.isEqual(snapshot_version_SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new watch_change_WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new document_key_DocumentKey(query.path);\n                    var deletedDoc = new document_NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new query_data_QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new query_data_QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        debug(remote_store_LOG_TAG, 'Stopping write stream with ' +\n            this.pendingWrites.length +\n            ' pending writes');\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    if (_this.pendingWrites.length === 0) {\n                        _this.writeStream.markIdle();\n                    }\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = mutation_batch_MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // If the write stream closed due to an error, invoke the error callbacks if\n        // there are pending writes.\n        if (error && this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            debug(remote_store_LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new transaction_Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        debug(remote_store_LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // If the network has been explicitly disabled, make sure we don't\n        // accidentally re-enable it.\n        if (this.isNetworkEnabled()) {\n            // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n            // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n            // (since mutations are per-user).\n            this.disableNetworkInternal();\n            this.updateOnlineState(OnlineState.Unknown);\n            return this.enableNetwork();\n        }\n    };\n    return RemoteStore;\n}());\n\n\n//# sourceMappingURL=remote_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/firestore_client.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar firestore_client_LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar firestore_client_FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n         * Asynchronous queue responsible for all of our internal processing. When\n         * we get incoming work from the user (via public API) or the network\n         * (incoming GRPC messages), we should always schedule onto this queue.\n         * This ensures all of our work is properly serialized (e.g. we don't\n         * start processing a new operation while the previous one is waiting for\n         * an async I/O to complete).\n         */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new no_op_garbage_collector_NoOpGarbageCollector();\n        var storagePrefix = indexeddb_persistence_IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new serializer_JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new indexeddb_persistence_IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new eager_garbage_collector_EagerGarbageCollector();\n        this.persistence = new memory_persistence_MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new local_store_LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new datastore_Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.syncEngine.applyOnlineStateChange(onlineState);\n                _this.eventMgr.applyOnlineStateChange(onlineState);\n            };\n            _this.remoteStore = new remote_store_RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new sync_engine_SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new event_manager_EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(firestore_client_LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new event_manager_QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\n\n\n//# sourceMappingURL=firestore_client.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\n\n\n//# sourceMappingURL=async_observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar async_queue_AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // A list with timeout handles and their respective deferred promises.\n        // Contains an entry for each operation that is queued to run in the future\n        // (i.e. it has a delay that has not yet elapsed). Prior to cleanup, this list\n        // may also contain entries that have already been run (in which case `handle` is\n        // null).\n        this.delayedOperations = [];\n        // The number of operations that are queued to be run in the future (i.e. they\n        // have a delay that has not yet elapsed). Unlike `delayedOperations`, this\n        // is guaranteed to only contain operations that have not yet been run.\n        //\n        // Visible for testing.\n        this.delayedOperationsCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay (in milliseconds) to wait before queuing the\n     * operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOperationsCount++;\n            var delayedOp_1 = {\n                handle: null,\n                op: op,\n                deferred: new Deferred()\n            };\n            delayedOp_1.handle = setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return delayedOp_1.op().then(function (result) {\n                        delayedOp_1.deferred.resolve(result);\n                    });\n                });\n                delayedOp_1.handle = null;\n                _this.delayedOperationsCount--;\n                if (_this.delayedOperationsCount === 0) {\n                    _this.delayedOperations = [];\n                }\n            }, delay);\n            this.delayedOperations.push(delayedOp_1);\n            return delayedOp_1.deferred.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log_error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently scheduled tasks are finished executing. Tasks\n     * scheduled with a delay can be rejected or queued for immediate execution.\n     */\n    AsyncQueue.prototype.drain = function (executeDelayedTasks) {\n        var _this = this;\n        this.delayedOperations.forEach(function (entry) {\n            if (entry.handle) {\n                clearTimeout(entry.handle);\n                if (executeDelayedTasks) {\n                    _this.scheduleInternal(entry.op).then(entry.deferred.resolve, entry.deferred.reject);\n                }\n                else {\n                    entry.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled by shutdown'));\n                }\n            }\n        });\n        this.delayedOperations = [];\n        this.delayedOperationsCount = 0;\n        return this.schedule(function () { return Promise.resolve(); });\n    };\n    return AsyncQueue;\n}());\n\n\n//# sourceMappingURL=async_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/auth/user.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.isEqual = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\n\n\n//# sourceMappingURL=user.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/credentials.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\n\n/** A CredentialsProvider that always yields an empty token. */\nvar credentials_EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\n\nvar credentials_FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.isEqual(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar credentials_FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar credentials_FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new credentials_FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nfunction makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new credentials_EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new credentials_FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar api_field_value___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    FieldValueImpl.prototype.isEqual = function (other) {\n        return this === other;\n    };\n    return FieldValueImpl;\n}());\n\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    api_field_value___extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\n\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    api_field_value___extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nvar PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/user_data_converter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar user_data_converter_ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new mutation_PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new mutation_SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar user_data_converter_ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new mutation_PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar user_data_converter_ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar user_data_converter_UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call. */\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Set, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new user_data_converter_ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.MergeSet, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new mutation_FieldMask(context.fieldMask);\n        return new user_data_converter_ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.QueryValue, methodName, path_FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new field_value_ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new sorted_map_SortedMap(primitiveComparator);\n        forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new field_value_ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return field_value_BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new field_value_StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(timestamp_Timestamp.fromDate(value));\n        }\n        else if (value instanceof geo_point_GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof blob_Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new field_value_RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                if (context.dataSource === UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof geo_point_GeoPoint) &&\n        !(input instanceof blob_Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction fieldPathFromArgument(methodName, path) {\n    if (path instanceof field_path_FieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/database.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar database___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar database_FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.isEqual = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar database_Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this._queue = new async_queue_AsyncQueue();\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            drainAsyncQueue: function (executeDelayedTasks) {\n                return _this._queue.drain(executeDelayedTasks);\n            }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new credentials_FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new database_info_DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new credentials_EmptyCredentialsProvider();\n        }\n        config.settings = new database_FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new database_FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.enableNetwork();\n    };\n    Firestore.prototype.disableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.disableNetwork();\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof database_DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.isEqual(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new user_data_converter_UserDataConverter(preConverter);\n        this._firestoreClient = new firestore_client_FirestoreClient(platform_PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new database_info_DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new database_CollectionReference(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return database_DocumentReference.forPath(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new database_Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new database_WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                setLogLevel(LogLevel.DEBUG);\n                break;\n            case 'error':\n                setLogLevel(LogLevel.ERROR);\n                break;\n            case 'silent':\n                setLogLevel(LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\n\n/**\n * A reference to a transaction.\n */\nvar database_Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof document_NoDocument) {\n                return new database_DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new database_DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\n\nvar database_WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new mutation_DeleteMutation(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar database_DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new document_key_DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new database_CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return new database_CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.isEqual(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new mutation_DeleteMutation(this._key, mutation_Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new database_DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(query_Query.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\n\nvar SnapshotMetadata = /** @class */ (function () {\n    function SnapshotMetadata(hasPendingWrites, fromCache) {\n        this.hasPendingWrites = hasPendingWrites;\n        this.fromCache = fromCache;\n    }\n    SnapshotMetadata.prototype.isEqual = function (other) {\n        return (this.hasPendingWrites === other.hasPendingWrites &&\n            this.fromCache === other.fromCache);\n    };\n    return SnapshotMetadata;\n}());\nvar database_DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function (options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n        options = validateSnapshotOptions('DocumentSnapshot.data', options);\n        return !this._document\n            ? undefined\n            : this.convertObject(this._document.data, field_value_FieldValueOptions.fromSnapshotOptions(options));\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath, options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n        options = validateSnapshotOptions('DocumentSnapshot.get', options);\n        if (this._document) {\n            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n            if (value !== undefined) {\n                return this.convertValue(value, field_value_FieldValueOptions.fromSnapshotOptions(options));\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new database_DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return new SnapshotMetadata(this._document !== null && this._document.hasLocalMutations, this._fromCache);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSnapshot)) {\n            throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._fromCache === other._fromCache &&\n            this._key.isEqual(other._key) &&\n            (this._document === null\n                ? other._document === null\n                : this._document.isEqual(other._document)));\n    };\n    DocumentSnapshot.prototype.convertObject = function (data, options) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value, options);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value, options) {\n        if (value instanceof field_value_ObjectValue) {\n            return this.convertObject(value, options);\n        }\n        else if (value instanceof field_value_ArrayValue) {\n            return this.convertArray(value, options);\n        }\n        else if (value instanceof field_value_RefValue) {\n            var key = value.value(options);\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.isEqual(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log_error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new database_DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value(options);\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data, options) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value, options);\n        });\n    };\n    return DocumentSnapshot;\n}());\n\nvar database_QueryDocumentSnapshot = /** @class */ (function (_super) {\n    database___extends(QueryDocumentSnapshot, _super);\n    function QueryDocumentSnapshot(firestore, key, document, fromCache) {\n        return _super.call(this, firestore, key, document, fromCache) || this;\n    }\n    QueryDocumentSnapshot.prototype.data = function (options) {\n        var data = _super.prototype.data.call(this, options);\n        assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');\n        return data;\n    };\n    return QueryDocumentSnapshot;\n}(database_DocumentSnapshot));\n\nvar database_Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new path_ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, new document_key_DocumentKey(path));\n            }\n            else if (value instanceof database_DocumentReference) {\n                var ref = value;\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, query_RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new query_OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.isEqual(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof database_DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new field_value_RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new document_key_DocumentKey(this._query.path.child(rawValue));\n                components.push(new field_value_RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new database_QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof query_RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.isEqual(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.isEqual(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\n\nvar database_QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new database_Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Check the equality. The call can be very expensive. */\n    QuerySnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof QuerySnapshot)) {\n            throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._originalQuery.isEqual(other._originalQuery) &&\n            this._snapshot.isEqual(other._snapshot));\n    };\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new database_QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\n\nvar database_CollectionReference = /** @class */ (function (_super) {\n    database___extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, query_Query.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new database_DocumentReference(new document_key_DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = misc_AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return database_DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(database_Query));\n\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateSnapshotOptions(methodName, options) {\n    if (options === undefined) {\n        return {};\n    }\n    validateOptionNames(methodName, options, ['serverTimestamps']);\n    validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof database_DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nfunction changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nvar PublicFirestore = makeConstructorPrivate(database_Firestore, 'Use firebase.firestore() instead.');\nvar PublicTransaction = makeConstructorPrivate(database_Transaction, 'Use firebase.firestore().runTransaction() instead.');\nvar PublicWriteBatch = makeConstructorPrivate(database_WriteBatch, 'Use firebase.firestore().batch() instead.');\nvar PublicDocumentReference = makeConstructorPrivate(database_DocumentReference, 'Use firebase.firestore().doc() instead.');\nvar PublicDocumentSnapshot = makeConstructorPrivate(database_DocumentSnapshot);\nvar PublicQueryDocumentSnapshot = makeConstructorPrivate(database_QueryDocumentSnapshot);\nvar PublicQuery = makeConstructorPrivate(database_Query);\nvar PublicQuerySnapshot = makeConstructorPrivate(database_QuerySnapshot);\nvar PublicCollectionReference = makeConstructorPrivate(database_CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/config.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: geo_point_GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: field_path_FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: database_Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nfunction configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new database_Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nfunction configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = database_Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/index.js\n/* harmony export (immutable) */ __webpack_exports__[\"registerFirestore\"] = registerFirestore;\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nfunction registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(esm[\"default\"]);\n\n//# sourceMappingURL=index.js.map\n\n\n/***/ }),\n\n/***/ 115:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.H=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Cb=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.w=this.w}var qa=0,ra={};w.prototype.i=!1;w.prototype.Z=function(){if(!this.i&&(this.i=!0,this.A(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.A=function(){if(this.w)for(;this.w.length;)this.w.shift()()};var sa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Ra=function(){var a=x;if(Ma)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:\"\");if(z){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ja={};\nfunction Ta(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Ua;var Va=k.document;\nUa=Va&&z?Oa()||(\"CSS1Compat\"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!z||9<=Number(Ua),Ya=z&&!Ta(\"9\"),Za=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Pa=!0}A.prototype.b=function(){this.Pa=!1};function $a(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:ab[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u($a,A);var ab=Wa({2:\"touch\",3:\"pen\",4:\"mouse\"});$a.prototype.b=function(){$a.H.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var bb=\"closure_listenable_\"+(1E6*Math.random()|0);function cb(a){return!(!a||!a[bb])}var db=0;function eb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++db;this.Y=this.ca=!1}function fb(a){a.Y=!0;a.listener=null;a.a=null;a.src=null;a.ga=null};function gb(a){this.src=a;this.a={};this.b=0}gb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=hb(a,b,d,e);-1<h?(b=a[h],c||(b.ca=!1)):(b=new eb(b,this.src,f,!!d,e),b.ca=c,a.push(b));return b};function ib(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(fb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function jb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=hb(a,c,d,e));return-1<b?a[b]:null}\nfunction hb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Y&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.aa(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new gb(a));c=m.add(b,c,d,h,f);if(c.a)return c;d=sb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.Ha(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}function vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=pb(c),cb(a)?a.va(b,c,d,e):a&&(a=rb(a))&&(b=jb(a,b,c,d,e))&&wb(b)}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Y){var b=a.src;if(cb(b))ib(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(ib(c,a),0==c.b&&(c.src=null,b[kb]=null)):fb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Y&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ca&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Y)return!0;if(!Xa){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new $a(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew $a(b,this))}function rb(a){a=a[kb];return a instanceof gb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function B(){w.call(this);this.c=new gb(this);this.P=this;this.K=null}u(B,w);B.prototype[bb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.K;if(c)for(b=[];c;c=c.K)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.A=function(){B.H.A.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,fb(d[e]);delete a.a[c];a.b--}}this.K=null};g.aa=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Ha=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};g.va=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=hb(f,b,c,d);-1<b&&(fb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--))}};\nfunction Ab(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Y&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ca&&ib(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Pa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Lb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Lb(){this.next=this.b=this.a=null}Lb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Lb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.za;c.za=null;a()}};return function(a){d.next={za:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.kb,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.$=!1;g.L=null;g.kb=function(){if(this.$){var a=t()-this.g;0<a&&a<.8*this.b?this.L=this.a.setTimeout(this.f,this.b-a):(this.L&&(this.a.clearTimeout(this.L),this.L=null),this.dispatchEvent(\"tick\"),this.$&&(this.L=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.$=!0;this.L||(this.L=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.$=!1;a.L&&(a.a.clearTimeout(a.L),a.L=null)}g.A=function(){Xb.H.A.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.eb,this);this.a=[]}u($b,w);g=$b.prototype;g.ha=!1;g.X=null;g.Xa=function(a){this.a=arguments;this.X?this.ha=!0:ac(this)};g.A=function(){$b.H.A.call(this);this.X&&(k.clearTimeout(this.X),this.X=null,this.ha=!1,this.a=[])};g.eb=function(){this.X=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.X=Zb(a.b,a.c);a.f.apply(null,a.a)};function C(a){w.call(this);this.b=a;this.a={}}u(C,w);var bc=[];C.prototype.aa=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=nb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nC.prototype.va=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.va(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=pb(c),d=!!d,b=cb(a)?jb(a.c,String(b),c,d,e):a?(a=rb(a))?jb(a,b,c,d,e):null:null,b&&(wb(b),delete this.a[b.key])};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}C.prototype.A=function(){C.H.A.call(this);cc(this)};C.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c){this.reset(a,b,c,void 0,void 0)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function D(a,b){this.name=a;this.value=b}D.prototype.toString=function(){return this.name};var gc=new D(\"SEVERE\",1E3),hc=new D(\"WARNING\",900),ic=new D(\"INFO\",800),jc=new D(\"CONFIG\",700),kc=new D(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}fc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar mc={},nc=null;function oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function E(a,b){a&&a.log(hc,b,void 0)}function pc(a,b){a&&a.log(ic,b,void 0)}function F(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}qc.prototype.Ea=function(){this.b=!1};function rc(a,b,c,d,e,f){H(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var G=m[v].split(\"=\");if(1<G.length){var Z=G[0];G=G[1];var Mb=Z.split(\"_\");h=2<=Mb.length&&\"type\"==Mb[1]?h+(Z+\"=\"+G+\"&\"):h+(Z+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction sc(a,b,c,d,e,f,h){H(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function tc(a,b,c,d){H(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+uc(a,c)+(d?\" \"+d:\"\")})}function vc(a,b){H(a,function(){return\"TIMEOUT: \"+b})}function I(a,b){F(a.a,b)}function wc(a,b,c){(a=a.a)&&a.log(gc,c||\"Exception\",b)}function H(a,b){pc(a.a,b)}function xc(a,b){(a=a.a)&&a.log(gc,b,void 0)}\nfunction uc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return I(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var yc=new B;function zc(a){A.call(this,\"serverreachability\",a)}u(zc,A);function Ac(a){yc.dispatchEvent(new zc(yc,a))}function Bc(a){A.call(this,\"statevent\",a)}u(Bc,A);function J(a){yc.dispatchEvent(new Bc(yc,a))}function Cc(a){A.call(this,\"timingevent\",a)}u(Cc,A);function Dc(a,b,c){yc.dispatchEvent(new Cc(yc,a,b,c))}function Ec(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Fc={NO_ERROR:0,lb:1,sb:2,rb:3,ob:4,qb:5,tb:6,Ra:7,TIMEOUT:8,wb:9};var Gc={nb:\"complete\",Ab:\"success\",Sa:\"error\",Ra:\"abort\",yb:\"ready\",zb:\"readystatechange\",TIMEOUT:\"timeout\",ub:\"incrementaldata\",xb:\"progress\",pb:\"downloadprogress\",Bb:\"uploadprogress\"};function Hc(){}Hc.prototype.a=null;function Ic(a){var b;(b=a.a)||(b={},Jc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Kc;function Lc(){}u(Lc,Hc);function Mc(a){return(a=Jc(a))?new ActiveXObject(a):new XMLHttpRequest}function Jc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Kc=new Lc;function K(a,b,c,d){this.i=a;this.b=b;this.f=c;this.T=d||1;this.N=new C(this);this.S=Nc;a=this.I=new Xb;a.b=Oc;a.L&&a.$?(Yb(a),a.start()):a.L&&Yb(a);this.j=null;this.c=!1;this.m=this.g=this.h=this.K=this.D=this.U=this.w=null;this.u=[];this.a=null;this.F=0;this.l=this.o=null;this.C=-1;this.B=!1;this.P=0;this.J=null;this.M=!1}var Nc=45E3,Oc=250;\nfunction Pc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Qc={},Rc={};g=K.prototype;g.setTimeout=function(a){this.S=a};function Sc(a,b,c){a.K=1;a.h=Tc(L(b));a.m=c;a.M=!0;Uc(a,null)}function Vc(a,b,c,d){a.K=1;a.h=Tc(L(b));a.m=null;a.M=c;Uc(a,d)}\nfunction Uc(a,b){a.D=t();Wc(a);a.g=L(a.h);Xc(a.g,\"t\",a.T);a.F=0;a.a=a.i.da(a.i.ia()?b:null);0<a.P&&(a.J=new $b(r(a.Qa,a,a.a),a.P));a.N.aa(a.a,\"readystatechange\",a.hb);b=a.j?Ea(a.j):{};a.m?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.m,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));Ac(1);rc(a.b,a.o,a.g,a.f,a.T,a.m)}g.hb=function(a){a=a.target;var b=this.J;b&&3==M(a)?(I(this.b,\"Throttling readystatechange.\"),b.Xa()):this.Qa(a)};\ng.Qa=function(a){try{a==this.a?Yc(this):E(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;wc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else wc(this.b,c,\"No response text\")}finally{}};\nfunction Yc(a){var b=M(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Ka&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?Ac(3):Ac(2));Zc(a);var e=a.a.W();a.C=e;(c=a.a.V())||I(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.c=200==e;sc(a.b,a.o,a.g,a.f,a.T,b,e);a.c?(a.M?($c(a,b,c),Ka&&a.c&&3==b&&ad(a)):(tc(a.b,a.f,c,null),bd(a,c)),4==b&&cd(a),a.c&&!a.B&&(4==b?a.i.ua(a):(a.c=!1,Wc(a)))):(400==e&&0<c.indexOf(\"Unknown SID\")?(a.l=3,J(12),E(a.b.a,\"XMLHTTP Unknown SID (\"+a.f+\")\")):(a.l=0,J(13),\nE(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.f+\")\")),cd(a),dd(a))}}function $c(a,b,c){for(var d=!0;!a.B&&a.F<c.length;){var e=ed(a,c);if(e==Rc){4==b&&(a.l=4,J(14),d=!1);tc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Qc){a.l=4;J(15);tc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else tc(a.b,a.f,e,null),bd(a,e)}4==b&&0==c.length&&(a.l=1,J(16),d=!1);a.c=a.c&&d;d||(tc(a.b,a.f,c,\"[Invalid Chunked Response]\"),cd(a),dd(a))}\ng.gb=function(){var a=M(this.a),b=this.a.V();this.F<b.length&&(Zc(this),$c(this,a,b),this.c&&4!=a&&Wc(this))};function ad(a){a.N.aa(a.I,\"tick\",a.gb);a.I.start()}function ed(a,b){var c=a.F,d=b.indexOf(\"\\n\",c);if(-1==d)return Rc;c=Number(b.substring(c,d));if(isNaN(c))return Qc;d+=1;if(d+c>b.length)return Rc;b=b.substr(d,c);a.F=d+c;return b}g.cancel=function(){this.B=!0;cd(this)};function Wc(a){a.U=t()+a.S;fd(a,a.S)}\nfunction fd(a,b){if(null!=a.w)throw Error(\"WatchDog timer not null\");a.w=Ec(r(a.fb,a),b)}function Zc(a){a.w&&(k.clearTimeout(a.w),a.w=null)}g.fb=function(){this.w=null;var a=t();0<=a-this.U?(this.c&&xc(this.b,\"Received watchdog timeout even though request loaded successfully\"),vc(this.b,this.g),2!=this.K&&(Ac(3),J(17)),cd(this),this.l=2,dd(this)):(E(this.b.a,\"WatchDog timer called too early\"),fd(this,this.U-a))};function dd(a){a.i.Ja()||a.B||a.i.ua(a)}\nfunction cd(a){Zc(a);var b=a.J;b&&\"function\"==typeof b.Z&&b.Z();a.J=null;Yb(a.I);cc(a.N);a.a&&(b=a.a,a.a=null,b.abort(),b.Z())}function bd(a,b){try{a.i.Ma(a,b),Ac(4)}catch(c){wc(a.b,c,\"Error in httprequest callback\")}};function gd(a){if(a.v&&\"function\"==typeof a.v)return a.v();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction hd(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.v&&\"function\"==typeof a.v)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=gd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof N?(c=a.O(),d=a.v()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=N.prototype;g.s=function(){return this.c};g.v=function(){id(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){id(this);return this.a.concat()};\nfunction jd(a){a.b={};a.a.length=0;a.c=0}function kd(a,b){return O(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&id(a),!0):!1}function id(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return O(this.b,a)?this.b[a]:b};g.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var ld=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function md(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function P(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof P?(this.h=void 0!==b?b:a.h,nd(this,a.f),this.j=a.j,od(this,a.b),pd(this,a.i),this.a=a.a,qd(this,rd(a.c)),this.g=a.g):a&&(c=String(a).match(ld))?(this.h=!!b,nd(this,c[1]||\"\",!0),this.j=sd(c[2]||\"\"),od(this,c[3]||\"\",!0),pd(this,c[4]),this.a=sd(c[5]||\"\",!0),qd(this,c[6]||\"\",!0),this.g=sd(c[7]||\"\")):(this.h=!!b,this.c=new td(null,this.h))}\nP.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ud(b,vd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ud(b,vd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ud(c,\"/\"==c.charAt(0)?wd:xd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ud(c,yd));return a.join(\"\")};\nP.prototype.resolve=function(a){var b=L(this),c=!!a.f;c?nd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?od(b,a.b):c=null!=a.i;var d=a.a;if(c)pd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?qd(b,rd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function L(a){return new P(a)}function nd(a,b,c){a.f=c?sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function od(a,b,c){a.b=c?sd(b,!0):b}function pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function qd(a,b,c){b instanceof td?(a.c=b,zd(a.c,a.h)):(c||(b=ud(b,Ad)),a.c=new td(b,a.h))}\nfunction Q(a,b,c){a.c.set(b,c)}function Xc(a,b,c){n(c)||(c=[String(c)]);Bd(a.c,b,c)}function Tc(a){Q(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function Cd(a){return a instanceof P?L(a):new P(a,void 0)}function Dd(a,b,c,d){var e=new P(null,void 0);a&&nd(e,a);b&&od(e,b);c&&pd(e,c);d&&(e.a=d);return e}function sd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ud(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Ed),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Ed(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var vd=/[#\\/\\?@]/g,xd=/[#\\?:]/g,wd=/[#\\?]/g,Ad=/[#\\?@]/g,yd=/#/g;function td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function R(a){a.a||(a.a=new N,a.b=0,a.c&&md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=td.prototype;g.s=function(){R(this);return this.b};\ng.add=function(a,b){R(this);this.c=null;a=Fd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Gd(a,b){R(a);b=Fd(a,b);O(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,kd(a.a,b))}function Hd(a,b){R(a);b=Fd(a,b);return O(a.a.b,b)}g.forEach=function(a,b){R(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){R(this);for(var a=this.a.v(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.v=function(a){R(this);var b=[];if(l(a))Hd(this,a)&&(b=xa(b,this.a.get(Fd(this,a))));else{a=this.a.v();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){R(this);this.c=null;a=Fd(this,a);Hd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.v(a):[];return 0<a.length?String(a[0]):b};\nfunction Bd(a,b,c){Gd(a,b);0<c.length&&(a.c=null,a.a.set(Fd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.v(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function rd(a){var b=new td;b.c=a.c;a.a&&(b.a=new N(a.a),b.b=a.b);return b}\nfunction Fd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function zd(a,b){b&&!a.f&&(R(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Gd(this,b),Bd(this,c,a))},a));a.f=b};function Id(){this.a=t()}var Jd=null;Id.prototype.set=function(a){this.a=a};Id.prototype.reset=function(){this.set(t())};Id.prototype.get=function(){return this.a};function Kd(){Jd||(Jd=new Id)}function Ld(){Jd||(Jd=new Id)}u(Ld,Kd);function Md(){}var Nd={OPEN:\"a\",mb:\"b\",Sa:\"c\",vb:\"d\"};function Od(){A.call(this,\"d\")}u(Od,A);function Pd(){A.call(this,\"c\")}u(Pd,A);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Qd.prototype;g.R=null;\nfunction Rd(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.I.a;if(null!=b)I(a.b,function(){return true?\"Buffered\":\"Unbuffered\"}),J(4),b?(J(10),Sd(a.a,a,!1)):(J(11),Sd(a.a,a,!0));else{a.c=new K(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.l);J(4);Xc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.K;d&&e&&Q(c,d,e);Vc(a.c,c,!1,a.g)}}g.da=function(a){return this.a.da(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ja=function(){return!1};\ng.Ma=function(a,b){this.f=a.C;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.D&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.K=a:E(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.ma.a.parse(b)}catch(e){wc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==\nthis.R)if(this.h)J(6);else if(\"11111\"==b){if(J(5),this.h=!0,!z||10<=Number(Ua))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)}else J(7),this.h=!1};\ng.ua=function(){this.f=this.c.C;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),J(10),Sd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?J(8):1==this.R&&J(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.ra=function(){return this.a.ra()};function Vd(){this.a=this.b=null};function S(){this.a=new N}function Wd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}S.prototype.s=function(){return this.a.s()};S.prototype.add=function(a){this.a.set(Wd(a),a)};S.prototype.contains=function(a){a=Wd(a);return O(this.a.b,a)};S.prototype.v=function(){return this.a.v()};function Xd(a,b){this.a=a;this.b=b};function Yd(a){this.g=a||Zd;this.f=k.pa&&k.pa.Ka&&k.pa.Ka()&&k.pa.Ka().Db?this.g:1;this.a=null;1<this.f&&(this.a=new S);this.b=null;this.c=[]}var Zd=10;function $d(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new S,a.b&&(ae(a,a.b),a.b=null))}function be(a){return a.b?!0:a.a?a.a.s()>=a.f:!1}function ce(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function ae(a,b){a.a?a.a.add(b):a.b=b}\nfunction de(a,b){a.b&&a.b==b?a.b=null:a.a&&a.a.contains(b)&&kd(a.a.a,Wd(b))}Yd.prototype.cancel=function(){this.c=ee(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.v(),function(a){a.cancel()}),jd(this.a.a))};function ee(a){if(null!=a.b)return a.c.concat(a.b.u);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ta(a.a.v(),function(a){b=b.concat(a.u)});return b}return ya(a.c)}function fe(a,b){a.c=a.c.concat(b)};function ge(){}ge.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};ge.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function he(){this.a=new ge}function ie(a,b,c){var d=c||\"\";try{hd(a,function(a,c){var e=a;p(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function je(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(ke,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(ke,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(ke,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(ke,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function ke(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){wc(a,f)}};function T(a){B.call(this);this.headers=new N;this.F=a||null;this.f=!1;this.D=this.a=null;this.M=this.u=\"\";this.j=0;this.g=\"\";this.h=this.J=this.o=this.I=!1;this.l=0;this.B=null;this.N=le;this.C=this.m=!1}u(T,B);var le=\"\";T.prototype.b=oc(\"goog.net.XhrIo\");var me=/^https?$/i,ne=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.u+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.u=a;this.g=\"\";this.j=0;this.M=b;this.I=!1;this.f=!0;this.a=this.F?Mc(this.F):Mc(Kc);this.D=this.F?Ic(this.F):Ic(Kc);this.a.onreadystatechange=r(this.La,this);try{F(this.b,U(this,\"Opening Xhr\")),this.J=!0,this.a.open(b,String(a),!0),this.J=!1}catch(f){F(this.b,U(this,\"Error opening Xhr: \"+f.message));oe(this,f);return}a=c||\"\";var e=new N(this.headers);\nd&&hd(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(ne,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{pe(this),0<this.l&&(this.C=qe(this.a),F(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ia,this)):this.B=Zb(this.Ia,this.l,this)),F(this.b,U(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){F(this.b,U(this,\"Send error: \"+f.message)),oe(this,f)}};function qe(a){return z&&Ta(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ia=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,F(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function oe(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;re(a);se(a)}function re(a){a.I||(a.I=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(F(this.b,U(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),se(this))};g.A=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),se(this,!0));T.H.A.call(this)};g.La=function(){this.i||(this.J||this.o||this.h?te(this):this.cb())};g.cb=function(){te(this)};\nfunction te(a){if(a.f&&\"undefined\"!=typeof goog)if(a.D[1]&&4==M(a)&&2==a.W())F(a.b,U(a,\"Local request error detected and ignored\"));else if(a.o&&4==M(a))Zb(a.La,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==M(a)){F(a.b,U(a,\"Request complete\"));a.f=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.u).match(ld)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!me.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",re(a))}finally{se(a)}}}function se(a,b){if(a.a){pe(a);var c=a.a,d=a.D[0]?aa:null;a.a=null;a.D=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(gc,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function pe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction M(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<M(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<M(this)?this.a.statusText:\"\"}catch(a){return F(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return F(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Ya=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};g.Fa=function(){return this.j};g.ab=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.M+\" \"+a.u+\" \"+a.W()+\"]\"};function ue(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function ve(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ue(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}Q(a,b,c);return a};function we(a){this.ya=0;this.g=[];this.a=new qc;this.I=new Vd;this.ja=this.wa=this.F=this.ka=this.b=this.K=this.j=this.U=this.h=this.M=this.i=null;this.Ua=this.P=0;this.la=this.B=this.o=this.m=this.l=this.f=null;this.u=this.xa=this.N=-1;this.T=this.w=this.C=0;this.S=a&&a.supportsCrossDomainXhr||!1;this.J=\"\";this.c=new Yd(a&&a.concurrentRequestLimit);this.ma=new he;this.D=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ta=a&&a.fastHandshake||!1;a&&a.Ea&&this.a.Ea()}g=we.prototype;\ng.oa=8;g.G=1;function xe(a){I(a.a,\"disconnect()\");ye(a);if(3==a.G){var b=a.P++,c=L(a.F);Q(c,\"SID\",a.J);Q(c,\"RID\",b);Q(c,\"TYPE\",\"terminate\");ze(a,c);b=new K(a,a.a,b,void 0);b.K=2;b.h=Tc(L(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.da(null),b.a.fa(b.h));b.D=t();Wc(b)}Ae(a)}\nfunction ye(a){a.B&&(a.B.abort(),a.B=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);Be(a);a.c.cancel();a.l&&(k.clearTimeout(a.l),a.l=null)}function Ce(a,b){1E3==a.g.length&&xc(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Xd(a.Ua++,b));3==a.G&&De(a)}g.Ja=function(){return 0==this.G};function De(a){be(a.c)||a.l||(a.l=Ec(r(a.Oa,a),0),a.C=0)}\nfunction Ee(a,b){var c=a.c;if((c.b?1:c.a?c.a.s():0)>=a.c.f-(a.l?1:0))return xc(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.l)return I(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.u.concat(a.g),!0;if(1==a.G||2==a.G||2<=a.C)return!1;I(a.a,\"Going to retry POST\");a.l=Ec(r(a.Oa,a,b),Fe(a,a.C));a.C++;return!0}\ng.Oa=function(a){this.l=null;I(this.a,\"startForwardChannel_\");if(1==this.G)if(a)xc(this.a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new K(this,this.a,a,void 0),c=this.i;this.M&&(c?(c=Ea(c),Ga(c,this.M)):c=this.M);null===this.h&&(b.j=c);var d=Ge(this,b),e=L(this.F);Q(e,\"RID\",a);Q(e,\"CVER\",21);this.D&&this.j&&Q(e,\"X-HTTP-Session-Id\",this.j);ze(this,e);this.h&&c&&ve(e,this.h,c);ae(this.c,b);this.Ta?(Q(e,\"$req\",d),Sc(b,e,null)):Sc(b,\ne,d);this.G=2}else 3==this.G&&(a?He(this,a):0==this.g.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):be(this.c)?xc(this.a,\"startForwardChannel_ returned: connection already in progress\"):(He(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction He(a,b){var c;b?c=b.f:c=a.P++;var d=L(a.F);Q(d,\"SID\",a.J);Q(d,\"RID\",c);Q(d,\"AID\",a.N);ze(a,d);a.h&&a.i&&ve(d,a.h,a.i);c=new K(a,a.a,c,a.C+1);null===a.h&&(c.j=a.i);b&&(a.g=b.u.concat(a.g));b=Ge(a,c);c.setTimeout(1E4+Math.round(1E4*Math.random()));ae(a.c,c);Sc(c,d,b)}function ze(a,b){a.f&&hd({},function(a,d){Q(b,d,a)})}\nfunction Ge(a,b){var c=Math.min(a.g.length,1E3),d=a.f?r(a.f.Va,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var G=e[v].a,Z=e[v].b;G-=f;if(0>G)f=Math.max(0,e[v].a-100),m=!1;else try{ie(Z,h,\"req\"+G+\"_\")}catch(Mb){d&&d(Z)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.u=a;return d}function Ie(a){if(!a.b&&!a.m){a.T=1;var b=a.Na;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.w=0}}\nfunction Je(a){if(a.b||a.m)return xc(a.a,\"Request already in progress\"),!1;if(3<=a.w)return!1;I(a.a,\"Going to retry GET\");a.T++;a.m=Ec(r(a.Na,a),Fe(a,a.w));a.w++;return!0}\ng.Na=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new K(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.P=0;var a=L(this.wa);Q(a,\"RID\",\"rpc\");Q(a,\"SID\",this.J);Q(a,\"CI\",this.la?\"0\":\"1\");Q(a,\"AID\",this.N);ze(this,a);Q(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&ve(a,this.h,this.i);Vc(this.b,a,!0,this.ja);I(this.a,\"New Request created\")};\nfunction Sd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&$d(a.c,d);a.la=c;a.u=b.f;I(a.a,\"connectChannel_()\");a.F=Ke(a,a.ka);De(a)}function Ud(a,b){I(a.a,\"Test Connection Failed\");a.u=b.f;V(a,2)}\ng.Ma=function(a,b){if(0!=this.G&&(this.b==a||ce(this.c,a)))if(this.u=a.C,ce(this.c,a)&&3==this.G){try{var c=this.ma.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Be(this),this.b.cancel(),this.b=null;else break a;else E(this.a.a,\"We do not have a BackChannel established\");Je(this);J(18)}else this.xa=b[1],a=this.xa-this.N,0<a&&(b=\nb[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.la&&0==this.w&&!this.o&&(this.o=Ec(r(this.bb,this),6E3)));else I(this.a,\"Bad POST response data returned\"),V(this,11)}else if(this.b==a&&Be(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.ma.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.G)if(\"c\"==d[0]){this.J=d[1];this.ja=d[2];var e=d[3];null!=e&&(this.oa=e,H(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.ya=d,H(this.a,\"SVER=\"+this.ya));\nthis.D&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&$d(this.c,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.K=d,Q(this.F,this.j,d)):E(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.G=3;this.f&&this.f.Da();this.wa=Td(this,this.ja,this.ka);Ie(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.G&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):xe(this):\"noop\"!=d[0]&&this.f&&this.f.Ca(d),this.w=0)}};\ng.bb=function(){null!=this.o&&(this.o=null,this.b.cancel(),this.b=null,Je(this),J(19))};function Be(a){null!=a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.ua=function(a){I(this.a,\"Request complete\");var b=null;if(this.b==a){Be(this);this.b=null;var c=2}else if(ce(this.c,a))b=a.u,de(this.c,a),c=1;else return;this.u=a.C;if(0!=this.G)if(a.c)1==c?(Dc(a.m?a.m.length:0,t()-a.D,this.C),De(this)):Ie(this);else{var d=a.l;if(3==d||0==d&&0<this.u)I(this.a,\"Not retrying due to error type\");else{var e=this;I(this.a,function(){return\"Maybe retrying, last error: \"+Pc(d,e.u)});if(1==c&&Ee(this,a)||2==c&&Je(this))return;I(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&fe(this.c,b);I(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Fe(a,b){var c=5E3+Math.floor(1E4*Math.random());a.ra()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){H(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=r(a.jb,a);c||(c=new P(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||nd(c,\"https\"),Tc(c));je(c.toString(),d)}else J(2);I(a.a,\"HttpChannel: error - \"+b);a.G=0;a.f&&a.f.Ba(b);Ae(a);ye(a)}g.jb=function(a){a?(H(this.a,\"Successfully pinged google.com\"),J(2)):(H(this.a,\"Failed to ping google.com\"),J(1))};\nfunction Ae(a){a.G=0;a.u=-1;if(a.f){var b=ee(a.c);if(0!=b.length||0!=a.g.length)I(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,ya(a.g),a.g.length=0;a.f.Aa()}}function Ke(a,b){b=Le(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Le(a,a.ia()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Le(a,b,c){var d=Cd(c);if(\"\"!=d.b)b&&od(d,b+\".\"+d.b),pd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Dd(e.protocol,f,e.port,c)}a.U&&Ba(a.U,function(a,b){Q(d,b,a)});b=a.j;c=a.K;b&&c&&Q(d,b,c);Q(d,\"VER\",a.oa);ze(a,d);return d}g.da=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.m=this.S;return a};g.ra=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Ld;function Me(){}g=Me.prototype;g.Da=function(){};\ng.Ca=function(){};g.Ba=function(){};g.Aa=function(){};g.Va=function(){};function Ne(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Oe(){if(z&&!(10<=Number(Ua)))throw Error(\"Environmental error: no available transport.\");}Oe.prototype.a=function(a,b){return new W(a,b)};\nfunction W(a,b){B.call(this);this.a=new we(b);this.b=a;this.m=b&&b.testUrl?b.testUrl:Ne(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nthis.a.M=a;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.h=a);this.l=b&&b.supportsCrossDomainXhr||!1;this.j=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],E(this.f,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Pe(this)}u(W,B);g=W.prototype;g.addEventListener=function(a,b,c,d){W.H.addEventListener.call(this,a,b,c,d)};\ng.removeEventListener=function(a,b,c,d){W.H.removeEventListener.call(this,a,b,c,d)};\ng.Za=function(){this.a.f=this.h;this.l&&(this.a.S=!0);var a=this.a,b=this.m,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");J(0);a.ka=c;a.U=d||{};a.D&&(I(a.a,\"connect() bypassed channel-test.\"),a.I.b=[],a.I.a=!1);I(a.a,\"connectTest_()\");a.B=new Qd(a,a.a);null===a.h&&(a.B.i=a.i);c=b;a.h&&a.i&&(c=ve(b,a.h,a.i));a=a.B;a.l=c;b=Ke(a.a,a.l);J(3);c=a.a.I.b;null!=c?(a.g=c[0],a.R=1,Rd(a)):(Xc(b,\"MODE\",\"init\"),!a.a.D&&a.a.j&&Xc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new K(a,a.b,void 0,void 0),a.c.j=a.i,Vc(a.c,b,!1,\nnull),a.R=0)};g.close=function(){xe(this.a)};g.$a=function(a){if(l(a)){var b={};b.__data__=a;Ce(this.a,b)}else this.j?(b={},b.__data__=Db(a),Ce(this.a,b)):Ce(this.a,a)};g.A=function(){this.a.f=null;delete this.h;xe(this.a);delete this.a;W.H.A.call(this)};function Qe(a){Od.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}u(Qe,Od);function Re(){Pd.call(this);this.status=1}u(Re,Pd);\nfunction Pe(a){this.a=a}u(Pe,Me);Pe.prototype.Da=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Pe.prototype.Ca=function(a){this.a.dispatchEvent(new Qe(a))};Pe.prototype.Ba=function(a){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Re(a))};Pe.prototype.Aa=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Se=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Oe);function Te(){this.b=[];this.a=[]}function Ue(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Te.prototype.s=function(){return this.b.length+this.a.length};Te.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Te.prototype.v=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ve(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(We);this.a=new Te;this.b=new S;this.g=null;this.ba()}u(Ve,w);var We=\"[goog.structs.Pool] Min can not be greater than max\";g=Ve.prototype;g.ea=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.s()&&(b=Ue(this.a),!this.ta(b));)this.ba();!b&&this.s()<this.c&&(b=this.qa());b&&(this.g=a,this.b.add(b));return b}};g.ib=function(a){return kd(this.b.a,Wd(a))?(this.na(a),!0):!1};\ng.na=function(a){kd(this.b.a,Wd(a));this.ta(a)&&this.s()<this.c?this.a.a.push(a):Xe(a)};g.ba=function(){for(var a=this.a;this.s()<this.h;){var b=this.qa();a.a.push(b)}for(;this.s()>this.c&&0<this.a.s();)Xe(Ue(a))};g.qa=function(){return{}};function Xe(a){if(\"function\"==typeof a.Z)a.Z();else for(var b in a)a[b]=null}g.ta=function(a){return\"function\"==typeof a.Wa?a.Wa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.s=function(){return this.a.s()+this.b.s()};\ng.A=function(){Ve.H.A.call(this);if(0<this.b.s())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Xe(Ue(a));delete this.a};function Ye(a,b){this.a=a;this.b=b};function Ze(a){this.a=[];if(a)a:{if(a instanceof Ze){var b=a.O();a=a.v();if(0>=this.s()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Ye(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)$e(this,b[d],a[d])}}function $e(a,b,c){var d=a.a;d.push(new Ye(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Ze.prototype.v=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nZe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Ze.prototype.s=function(){return this.a.length};function af(){Ze.call(this)}u(af,Ze);function X(a,b){this.f=new af;Ve.call(this,a,b)}u(X,Ve);g=X.prototype;g.ea=function(a,b){if(!a)return X.H.ea.call(this);$e(this.f,void 0!==b?b:100,a);this.sa()};g.sa=function(){for(var a=this.f;0<a.s();){var b=this.ea();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.na=function(a){X.H.na.call(this,a);this.sa()};g.ba=function(){X.H.ba.call(this);this.sa()};g.A=function(){X.H.A.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Y(a,b,c,d){this.l=a;this.j=!!d;X.call(this,b,c)}u(Y,X);Y.prototype.qa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Y.prototype.ta=function(a){return!a.i&&!a.a};Oe.prototype.createWebChannel=Oe.prototype.a;W.prototype.send=W.prototype.$a;W.prototype.open=W.prototype.Za;W.prototype.close=W.prototype.close;Fc.NO_ERROR=0;Fc.TIMEOUT=8;Fc.HTTP_ERROR=6;Gc.COMPLETE=\"complete\";Md.EventType=Nd;Nd.OPEN=\"a\";Nd.CLOSE=\"b\";Nd.ERROR=\"c\";Nd.MESSAGE=\"d\";B.prototype.listen=B.prototype.aa;Y.prototype.getObject=Y.prototype.ea;Y.prototype.releaseObject=Y.prototype.ib;T.prototype.listenOnce=T.prototype.Ha;T.prototype.getLastError=T.prototype.ab;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Ya;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Se,ErrorCode:Fc,EventType:Gc,WebChannel:Md,XhrIoPool:Y};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))\n\n/***/ })\n\n},[113]);\n        } catch(error) {\n          throw new Error(\n            'Cannot instantiate firebase-firestore.js - ' +\n            'be sure to load firebase-app.js first.'\n          )\n        }\n\n\n// WEBPACK FOOTER //\n// firebase-firestore.js","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire('@firebase/firestore');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./firestore/index.js\n// module id = 113\n// module chunks = 1","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel() {\n    return logLevel;\n}\nexport function setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nexport function error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/log.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SDK_VERSION } from '../core/version';\nimport { error } from './log';\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nexport function assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/assert.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\nexport { PlatformSupport };\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nexport function emptyByteString() {\n    return PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\nimport { Code, FirestoreError } from './error';\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/api.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = Number(key);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nexport function forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nexport function isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport * as obj from './obj';\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {\n    var expectedDescription = [];\n    for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {\n        var val = expected_1[_i];\n        if (val === input) {\n            return;\n        }\n        expectedDescription.push(valueDescription(val));\n    }\n    var actualDescription = valueDescription(input);\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid value \" + actualDescription + \" provided to function \" + functionName + \"() for option \\\"serverTimestamps\\\". Acceptable values: \" + expectedDescription.join(', '));\n}\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {\n    if (input !== undefined) {\n        validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nexport function validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(functionName, options, optionNames) {\n    obj.forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/input_validation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\n// tslint:disable-next-line:class-as-namespace\nvar AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\nexport { AutoId };\nexport function primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using isEqual(). */\nexport function equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.isEqual(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nexport function immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/misc.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    Blob.prototype.isEqual = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\nexport { Blob };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/blob.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert, fail } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/** Defines the return value for pending server timestamps. */\nexport var ServerTimestampBehavior;\n(function (ServerTimestampBehavior) {\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Default\"] = 0] = \"Default\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Estimate\"] = 1] = \"Estimate\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Previous\"] = 2] = \"Previous\";\n})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));\n/** Holds properties that define field value deserialization options. */\nvar FieldValueOptions = /** @class */ (function () {\n    function FieldValueOptions(serverTimestampBehavior) {\n        this.serverTimestampBehavior = serverTimestampBehavior;\n    }\n    FieldValueOptions.fromSnapshotOptions = function (options) {\n        switch (options.serverTimestamps) {\n            case 'estimate':\n                return new FieldValueOptions(ServerTimestampBehavior.Estimate);\n            case 'previous':\n                return new FieldValueOptions(ServerTimestampBehavior.Previous);\n            case 'none': // Fall-through intended.\n            case undefined:\n                return FieldValueOptions.defaultOptions;\n            default:\n                return fail('fromSnapshotOptions() called with invalid options.');\n        }\n    };\n    FieldValueOptions.defaultOptions = new FieldValueOptions(ServerTimestampBehavior.Default);\n    return FieldValueOptions;\n}());\nexport { FieldValueOptions };\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\nexport { FieldValue };\nvar NullValue = /** @class */ (function (_super) {\n    __extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function (options) {\n        return null;\n    };\n    NullValue.prototype.isEqual = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\nexport { NullValue };\nvar BooleanValue = /** @class */ (function (_super) {\n    __extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.isEqual = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    __extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    __extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\nexport { IntegerValue };\nvar DoubleValue = /** @class */ (function (_super) {\n    __extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\nexport { DoubleValue };\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    __extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    StringValue.prototype.isEqual = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\nexport { StringValue };\nvar TimestampValue = /** @class */ (function (_super) {\n    __extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function (options) {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    __extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime, previousValue) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.previousValue = previousValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function (options) {\n        if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {\n            return this.localWriteTime.toDate();\n        }\n        else if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {\n            return this.previousValue ? this.previousValue.value(options) : null;\n        }\n        else {\n            return null;\n        }\n    };\n    ServerTimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.isEqual(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\nexport { ServerTimestampValue };\nvar BlobValue = /** @class */ (function (_super) {\n    __extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BlobValue.prototype.isEqual = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\nexport { BlobValue };\nvar RefValue = /** @class */ (function (_super) {\n    __extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function (options) {\n        return this.key;\n    };\n    RefValue.prototype.isEqual = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\nexport { RefValue };\nvar GeoPointValue = /** @class */ (function (_super) {\n    __extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.isEqual = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\nexport { GeoPointValue };\nvar ObjectValue = /** @class */ (function (_super) {\n    __extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function (options) {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value(options);\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.isEqual = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(FieldValue));\nexport { ObjectValue };\nvar ArrayValue = /** @class */ (function (_super) {\n    __extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function (options) {\n        return this.internalValue.map(function (v) { return v.value(options); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.isEqual = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].isEqual(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\nexport { ArrayValue };\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/field_value.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport var isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DoubleValue, NullValue, RefValue } from '../model/field_value';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nvar Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.isEqual(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.isEqual = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].isEqual(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.isEqual(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.isEqual(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.isEqual(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.isEqual(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\nexport { Query };\nvar RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.isEqual = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\nexport { RelationOp };\nvar RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case RelationOp.LESS_THAN:\n                return comparison < 0;\n            case RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case RelationOp.EQUAL:\n                return comparison === 0;\n            case RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.isEqual = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.isEqual(other.op) &&\n                this.field.isEqual(other.field) &&\n                this.value.isEqual(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\nexport { RelationFilter };\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.isEqual = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\nexport { NullFilter };\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.isEqual = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\nexport { NanFilter };\n/**\n * Creates a filter based on the provided arguments.\n */\nexport function fieldFilter(field, op, value) {\n    if (value.isEqual(NullValue.INSTANCE)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.isEqual(DoubleValue.NAN)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\nexport { Direction };\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.isEqual = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.isEqual(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\nexport { Bound };\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? Document.compareByKey(d1, d2)\n            : Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.isEqual = function (other) {\n        return this.dir === other.dir && this.field.isEqual(other.field);\n    };\n    return OrderBy;\n}());\nexport { OrderBy };\nvar KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/query.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nexport function isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log.error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/rpc_error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { DocumentKey } from './document_key';\nvar EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/collections.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\nimport { assert, fail } from '../util/assert';\nimport * as objUtils from '../util/obj';\nimport { CurrentStatusUpdate, RemoteEvent, ResetMapping, UpdateMapping } from './remote_event';\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n         * The new document or NoDocument if it was deleted. Is null if the\n         * document went out of view without the server sending a new document.\n         */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\nexport { DocumentWatchChange };\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\nexport { ExistenceFilterChange };\nexport var WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\nexport { WatchTargetChange };\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = objUtils.shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        objUtils.forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!objUtils.contains(this.pendingTargetResponses, targetId) &&\n            objUtils.contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!objUtils.contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\nexport { WatchChangeAggregator };\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/watch_change.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Bound, Direction, NanFilter, NullFilter, OrderBy, Query, RelationFilter, RelationOp } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { QueryPurpose } from '../local/query_data';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport * as fieldValue from '../model/field_value';\nimport { DeleteMutation, FieldMask, FieldTransform, MutationResult, PatchMutation, Precondition, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as obj from '../util/obj';\nimport * as typeUtils from '../util/types';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode, mapRpcCodeFromCode } from './rpc_error';\nimport { DocumentWatchChange, ExistenceFilterChange, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!typeUtils.isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return Number(value);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!typeUtils.isNullOrUndefined(val)) {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return typeUtils.isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof fieldValue.NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof fieldValue.BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof fieldValue.IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof fieldValue.DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof fieldValue.StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof fieldValue.ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof fieldValue.ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof fieldValue.TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof fieldValue.GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof fieldValue.BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof fieldValue.RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return fieldValue.NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return fieldValue.BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new fieldValue.IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return fieldValue.DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return fieldValue.DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return fieldValue.DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new fieldValue.DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new fieldValue.StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new fieldValue.ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new fieldValue.TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new fieldValue.GeoPointValue(new GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new fieldValue.BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new fieldValue.RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = fieldValue.ObjectValue.EMPTY;\n        obj.forEach(map, function (key, value) {\n            result = result.set(new FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : SnapshotVersion.forDeletedDoc();\n            var doc = new NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return Precondition.exists(precondition.exists);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return FieldPath.fromServerFormat(path); });\n        return new FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\nexport { JsonProtoSerializer };\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new InternalFieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    FieldPath.prototype.isEqual = function (other) {\n        if (!(other instanceof FieldPath)) {\n            throw invalidClassError('isEqual', 'FieldPath', 1, other);\n        }\n        return this._internalPath.isEqual(other._internalPath);\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentSet } from '../model/document_set';\nimport { CurrentStatusUpdate, ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport { OnlineState } from './types';\nimport { ChangeType, DocumentChangeSet, SyncState, ViewSnapshot } from './view_snapshot';\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\nexport { AddedLimboDocument };\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\nexport { RemovedLimboDocument };\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.isEqual(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, newSyncState === SyncState.Local, !docChanges.mutatedKeys.isEmpty(), syncStateChanged);\n            return {\n                snapshot: snap,\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Applies an OnlineState change to the view, potentially generating a\n     * ViewChange if the view's syncState changes as a result.\n     */\n    View.prototype.applyOnlineStateChange = function (onlineState) {\n        if (this.current && onlineState === OnlineState.Failed) {\n            // If we're offline, set `current` to false and then call applyChanges()\n            // to refresh our syncState and generate a ViewChange as appropriate. We\n            // are guaranteed to get a new TargetChange that sets `current` back to\n            // true once the client is back online.\n            this.current = false;\n            return this.applyChanges({\n                documentSet: this.documentSet,\n                changeSet: new DocumentChangeSet(),\n                mutatedKeys: this.mutatedKeys,\n                needsRefill: false\n            });\n        }\n        else {\n            // No effect, just return a no-op ViewChange.\n            return { limboChanges: [] };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\nexport { View };\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nexport function prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/encoded_resource_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { encode } from './encoded_resource_path';\nexport var SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nexport function createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(DbMutationBatch.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\nexport { DbTimestamp };\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\nexport { DbOwner };\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n         * The normalized user ID to which this queue belongs.\n         */\n        userId, \n        /**\n         * An identifier for the highest numbered batch that has been acknowledged\n         * by the server. All MutationBatches in this queue with batchIds less\n         * than or equal to this value are considered to have been acknowledged by\n         * the server.\n         */\n        lastAcknowledgedBatchId, \n        /**\n         * A stream token that was previously sent by the server.\n         *\n         * See StreamingWriteRequest in datastore.proto for more details about\n         * usage.\n         *\n         * After sending this token, earlier tokens may not be used anymore so\n         * only a single stream token is retained.\n         */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\nexport { DbMutationQueue };\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n         * The normalized user ID to which this batch belongs.\n         */\n        userId, \n        /**\n         * An identifier for this batch, allocated by the mutation queue in a\n         * monotonically increasing manner.\n         */\n        batchId, \n        /**\n         * The local write time of the batch, stored as milliseconds since the\n         * epoch.\n         */\n        localWriteTimeMs, \n        /**\n         * A list of mutations to apply. All mutations will be applied atomically.\n         *\n         * Mutations are serialized via JsonProtoSerializer.toMutation().\n         */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\nexport { DbMutationBatch };\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\nexport { DbDocumentMutation };\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\nexport { DbNoDocument };\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n         * Set to an instance of a DbNoDocument if it is known that no document\n         * exists.\n         */\n        noDocument, \n        /**\n         * Set to an instance of a Document if there's a cached version of the\n         * document.\n         */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\nexport { DbRemoteDocument };\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n         * An auto-generated sequential numeric identifier for the query.\n         *\n         * Queries are stored using their canonicalId as the key, but these\n         * canonicalIds can be quite long so we additionally assign a unique\n         * queryId which can be used by referenced data structures (e.g.\n         * indexes) to minimize the on-disk cost.\n         */\n        targetId, \n        /**\n         * The canonical string representing this query. This is not unique.\n         */\n        canonicalId, \n        /**\n         * The last readTime received from the Watch Service for this query.\n         *\n         * This is the same value as TargetChange.read_time in the protos.\n         */\n        readTime, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data\n         * that matches the query. The resume token essentially identifies a\n         * point in time from which the server should resume sending results.\n         *\n         * This is related to the snapshotVersion in that the resumeToken\n         * effectively also encodes that value, but the resumeToken is opaque\n         * and sometimes encodes additional information.\n         *\n         * A consequence of this is that the resumeToken should be used when\n         * asking the server to reason about where this client is in the watch\n         * stream, but the client should use the snapshotVersion for its own\n         * purposes.\n         *\n         * This is the same value as TargetChange.resume_token in the protos.\n         */\n        resumeToken, \n        /**\n         * A sequence number representing the last time this query was\n         * listened to, used for garbage collection purposes.\n         *\n         * Conventionally this would be a timestamp value, but device-local\n         * clocks are unreliable and they must be able to create new listens\n         * even while disconnected. Instead this should be a monotonically\n         * increasing number that's incremented on each listen call.\n         *\n         * This is different from the queryId since the queryId is an\n         * immutable identifier assigned to the Query on first use while\n         * lastListenSequenceNumber is updated every time the query is\n         * listened to.\n         */\n        lastListenSequenceNumber, \n        /**\n         * The query for this target.\n         *\n         * Because canonical ids are not unique we must store the actual query. We\n         * use the proto to have an object we can persist without having to\n         * duplicate translation logic to and from a `Query` object.\n         */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\nexport { DbTarget };\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n         * The targetId identifying a target.\n         */\n        targetId, \n        /**\n         * The path to the document, as encoded in the key.\n         */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\nexport { DbTargetDocument };\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n         * The highest numbered target id across all targets.\n         *\n         * See DbTarget.targetId.\n         */\n        highestTargetId, \n        /**\n         * The highest numbered lastListenSequenceNumber across all targets.\n         *\n         * See DbTarget.lastListenSequenceNumber.\n         */\n        highestListenSequenceNumber, \n        /**\n         * A global snapshot version representing the last consistent snapshot we\n         * received from the backend. This is monotonically increasing and any\n         * snapshots received from the backend prior to this version (e.g. for\n         * targets resumed with a resumeToken) should be suppressed (buffered)\n         * until the backend has caught up to this snapshot version again. This\n         * prevents our cache from ever going backwards in time.\n         */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\nexport { DbTargetGlobal };\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nexport var ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_schema.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PersistencePromise } from './persistence_promise';\nvar LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(LOG_TAG, 'Opening database:', name);\n        return new PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\nexport { SimpleDb };\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\nexport { IterationController };\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\nexport { SimpleDbTransaction };\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\nexport { SimpleDbStore };\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/simple_db.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { immediatePredecessor, primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbDocumentMutation, DbMutationBatch, DbMutationQueue } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n         * The normalized userId (e.g. null UID => \"\" userId) used to store /\n         * retrieve mutations.\n         */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = EncodedResourcePath.encode(mutation.key.path);\n                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, DbDocumentMutation.PLACEHOLDER);\n            }\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = EncodedResourcePath.decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\nexport { IndexedDbMutationQueue };\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { assert, fail } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbTarget, DbTargetDocument, DbTargetGlobal } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = SnapshotVersion.fromTimestamp(new Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.isEqual(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = EncodedResourcePath.decode(key[1]);\n                var docKey = new DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = EncodedResourcePath.decode(key[1]);\n            var docKey = new DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = EncodedResourcePath.encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\nexport { IndexedDbQueryCache };\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { fail } from '../util/assert';\nimport { DbRemoteDocument } from './indexeddb_schema';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\nexport { IndexedDbRemoteDocumentCache };\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { DbMutationBatch, DbNoDocument, DbRemoteDocument, DbTarget, DbTimestamp } from './indexeddb_schema';\nimport { QueryData, QueryPurpose } from './query_data';\n/** Serializer for values stored in the LocalStore. */\nvar LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new Timestamp(readTime.seconds, readTime.nanos);\n            return new NoDocument(key, SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\nexport { LocalSerializer };\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { User } from '../auth/user';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\nexport { OAuthToken };\n/** A CredentialsProvider that always yields an empty token. */\nvar EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\nexport { EmptyCredentialsProvider };\nvar FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.isEqual(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\nexport { FirebaseCredentialsProvider };\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\nexport { FirstPartyToken };\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\nexport { FirstPartyCredentialsProvider };\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/credentials.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from '../core/timestamp';\nimport { ObjectValue } from '../model/field_value';\nimport { ArrayValue, BlobValue, BooleanValue, DoubleValue, GeoPointValue, IntegerValue, NullValue, RefValue, StringValue, TimestampValue } from '../model/field_value';\nimport { FieldMask, FieldTransform, PatchMutation, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\nimport { Blob } from './blob';\nimport { FieldPath as ExternalFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, FieldValueImpl, ServerTimestampFieldValueImpl } from './field_value';\nimport { GeoPoint } from './geo_point';\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\nexport { ParsedSetData };\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\nexport { ParsedUpdateData };\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\nexport { DocumentKeyReference };\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call. */\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new FieldMask(context.fieldMask);\n        return new ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        objUtils.forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.QueryValue, methodName, FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new SortedMap(primitiveComparator);\n        objUtils.forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (typeUtils.isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(Timestamp.fromDate(value));\n        }\n        else if (value instanceof GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                if (context.dataSource === UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\nexport { UserDataConverter };\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof GeoPoint) &&\n        !(input instanceof Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(methodName, path) {\n    if (path instanceof ExternalFieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/user_data_converter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { FirestoreClient } from '../core/firestore_client';\nimport { Bound, Direction, fieldFilter, OrderBy, Query as InternalQuery, RelationFilter, RelationOp } from '../core/query';\nimport { ChangeType } from '../core/view_snapshot';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ArrayValue, FieldValueOptions, ObjectValue, RefValue } from '../model/field_value';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { ResourcePath } from '../model/path';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { assert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateAtLeastNumberOfArgs, validateBetweenNumberOfArgs, validateDefined, validateExactNumberOfArgs, validateNamedOptionalType, validateNamedOptionalPropertyEquals, validateNamedType, validateOptionalArgType, validateOptionNames, valueDescription } from '../util/input_validation';\nimport * as log from '../util/log';\nimport { LogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { EmptyCredentialsProvider, FirebaseCredentialsProvider, makeCredentialsProvider } from './credentials';\nimport { isPartialObserver } from './observer';\nimport { DocumentKeyReference, fieldPathFromArgument, UserDataConverter } from './user_data_converter';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = objUtils.defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.isEqual = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this._queue = new AsyncQueue();\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            drainAsyncQueue: function (executeDelayedTasks) {\n                return _this._queue.drain(executeDelayedTasks);\n            }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new EmptyCredentialsProvider();\n        }\n        config.settings = new FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (objUtils.contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.enableNetwork();\n    };\n    Firestore.prototype.disableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.disableNetwork();\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.isEqual(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new UserDataConverter(preConverter);\n        this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!objUtils.contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (objUtils.contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (objUtils.contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new CollectionReference(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (log.getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + log.getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                log.setLogLevel(log.LogLevel.DEBUG);\n                break;\n            case 'error':\n                log.setLogLevel(log.LogLevel.ERROR);\n                break;\n            case 'silent':\n                log.setLogLevel(log.LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\nexport { Firestore };\n/**\n * A reference to a transaction.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof NoDocument) {\n                return new DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\nexport { Transaction };\nvar WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\nexport { WriteBatch };\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return new CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.isEqual(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new DeleteMutation(this._key, Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(InternalQuery.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\nexport { DocumentReference };\nvar SnapshotMetadata = /** @class */ (function () {\n    function SnapshotMetadata(hasPendingWrites, fromCache) {\n        this.hasPendingWrites = hasPendingWrites;\n        this.fromCache = fromCache;\n    }\n    SnapshotMetadata.prototype.isEqual = function (other) {\n        return (this.hasPendingWrites === other.hasPendingWrites &&\n            this.fromCache === other.fromCache);\n    };\n    return SnapshotMetadata;\n}());\nvar DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function (options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n        options = validateSnapshotOptions('DocumentSnapshot.data', options);\n        return !this._document\n            ? undefined\n            : this.convertObject(this._document.data, FieldValueOptions.fromSnapshotOptions(options));\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath, options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n        options = validateSnapshotOptions('DocumentSnapshot.get', options);\n        if (this._document) {\n            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n            if (value !== undefined) {\n                return this.convertValue(value, FieldValueOptions.fromSnapshotOptions(options));\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return new SnapshotMetadata(this._document !== null && this._document.hasLocalMutations, this._fromCache);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSnapshot)) {\n            throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._fromCache === other._fromCache &&\n            this._key.isEqual(other._key) &&\n            (this._document === null\n                ? other._document === null\n                : this._document.isEqual(other._document)));\n    };\n    DocumentSnapshot.prototype.convertObject = function (data, options) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value, options);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value, options) {\n        if (value instanceof ObjectValue) {\n            return this.convertObject(value, options);\n        }\n        else if (value instanceof ArrayValue) {\n            return this.convertArray(value, options);\n        }\n        else if (value instanceof RefValue) {\n            var key = value.value(options);\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.isEqual(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log.error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value(options);\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data, options) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value, options);\n        });\n    };\n    return DocumentSnapshot;\n}());\nexport { DocumentSnapshot };\nvar QueryDocumentSnapshot = /** @class */ (function (_super) {\n    __extends(QueryDocumentSnapshot, _super);\n    function QueryDocumentSnapshot(firestore, key, document, fromCache) {\n        return _super.call(this, firestore, key, document, fromCache) || this;\n    }\n    QueryDocumentSnapshot.prototype.data = function (options) {\n        var data = _super.prototype.data.call(this, options);\n        assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');\n        return data;\n    };\n    return QueryDocumentSnapshot;\n}(DocumentSnapshot));\nexport { QueryDocumentSnapshot };\nvar Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));\n            }\n            else if (value instanceof DocumentReference) {\n                var ref = value;\n                fieldValue = new RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.isEqual(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new DocumentKey(this._query.path.child(rawValue));\n                components.push(new RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.isEqual(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.isEqual(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\nexport { Query };\nvar QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Check the equality. The call can be very expensive. */\n    QuerySnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof QuerySnapshot)) {\n            throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._originalQuery.isEqual(other._originalQuery) &&\n            this._snapshot.isEqual(other._snapshot));\n    };\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\nexport { QuerySnapshot };\nvar CollectionReference = /** @class */ (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, InternalQuery.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new DocumentReference(new DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(Query));\nexport { CollectionReference };\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateSnapshotOptions(methodName, options) {\n    if (options === undefined) {\n        return {};\n    }\n    validateOptionNames(methodName, options, ['serverTimestamps']);\n    validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nexport var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');\nexport var PublicTransaction = makeConstructorPrivate(Transaction, 'Use firebase.firestore().runTransaction() instead.');\nexport var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');\nexport var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');\nexport var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport var PublicQueryDocumentSnapshot = makeConstructorPrivate(QueryDocumentSnapshot);\nexport var PublicQuery = makeConstructorPrivate(Query);\nexport var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/database.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublicBlob } from '../api/blob';\nimport { Firestore, PublicCollectionReference, PublicDocumentReference, PublicDocumentSnapshot, PublicFirestore, PublicQuery, PublicQueryDocumentSnapshot, PublicQuerySnapshot, PublicTransaction, PublicWriteBatch } from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { shallowCopy } from '../util/obj';\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nexport function configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nexport function configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/config.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport './src/platform_browser/browser_init';\nimport { configureForFirebase } from './src/platform/config';\nexport function registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(firebase);\n\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/index.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\n/** The semver (www.semver.org) version of the SDK. */\nexport var SDK_VERSION = firebase.SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nexport var Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\nexport { FirestoreError };\n\n//# sourceMappingURL=error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GeoPoint.prototype.isEqual = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\nexport { GeoPoint };\n\n//# sourceMappingURL=geo_point.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/geo_point.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\nexport { DatabaseInfo };\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.isEqual = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\nexport { DatabaseId };\n\n//# sourceMappingURL=database_info.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/database_info.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nexport var DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.isEqual = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\nexport { Path };\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar ResourcePath = /** @class */ (function (_super) {\n    __extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(Path));\nexport { ResourcePath };\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar FieldPath = /** @class */ (function (_super) {\n    __extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(Path));\nexport { FieldPath };\n\n//# sourceMappingURL=path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { ResourcePath } from './path';\nvar DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.isEqual = function (other) {\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));\n    return DocumentKey;\n}());\nexport { DocumentKey };\n\n//# sourceMappingURL=document_key.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_key.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.isEqual = function (other) {\n        return (other instanceof Document &&\n            this.key.isEqual(other.key) &&\n            this.version.isEqual(other.version) &&\n            this.data.isEqual(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.isEqual = function (other) {\n        return (other &&\n            other.version.isEqual(this.version) &&\n            other.key.isEqual(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\nexport { NoDocument };\n\n//# sourceMappingURL=document.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    // Returns an iterator over the SortedMap.\n    SortedMap.prototype.getIterator = function () {\n        return new SortedMapIterator(this.root, null, this.comparator, false);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key) {\n        return new SortedMapIterator(this.root, key, this.comparator, false);\n    };\n    SortedMap.prototype.getReverseIterator = function () {\n        return new SortedMapIterator(this.root, null, this.comparator, true);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key) {\n        return new SortedMapIterator(this.root, key, this.comparator, true);\n    };\n    return SortedMap;\n}()); // end SortedMap\nexport { SortedMap };\n// An iterator over an LLRBNode.\nvar SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse) {\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        return { key: node.key, value: node.value };\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\nexport { SortedMapIterator };\n// Represents a node in a Left-leaning Red-Black tree.\nvar LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\nexport { LLRBNode };\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\nexport { LLRBEmptyNode };\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\nexport var QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.isEqual = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.isEqual(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.isEqual(other.query));\n    };\n    return QueryData;\n}());\nexport { QueryData };\n\n//# sourceMappingURL=query_data.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/query_data.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = Number(nanoStr);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.isEqual = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\nexport { Timestamp };\n\n//# sourceMappingURL=timestamp.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/timestamp.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from './timestamp';\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.isEqual = function (other) {\n        return this.timestamp.isEqual(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));\n    return SnapshotVersion;\n}());\nexport { SnapshotVersion };\n\n//# sourceMappingURL=snapshot_version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/snapshot_version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { assert, fail } from '../util/assert';\nimport * as misc from '../util/misc';\nimport { Document, NoDocument } from './document';\nimport { ObjectValue, ServerTimestampValue } from './field_value';\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.isEqual = function (other) {\n        return misc.arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\nexport { FieldMask };\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.isEqual = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\nexport { ServerTimestampTransform };\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.isEqual = function (other) {\n        return (this.field.isEqual(other.field) && this.transform.isEqual(other.transform));\n    };\n    return FieldTransform;\n}());\nexport { FieldTransform };\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n         * The version at which the mutation was committed or null for a delete.\n         */\n        version, \n        /**\n         * The resulting fields returned from the backend after a\n         * TransformMutation has been committed. Contains one FieldValue for each\n         * FieldTransform that was in the mutation.\n         *\n         * Will be null if the mutation was not a TransformMutation.\n         */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\nexport { MutationResult };\nexport var MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof Document &&\n                maybeDoc.version.isEqual(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.isEqual = function (other) {\n        return (misc.equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\nexport { Precondition };\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\nexport { Mutation };\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar SetMutation = /** @class */ (function (_super) {\n    __extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.isEqual = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.isEqual(other.key) &&\n            this.value.isEqual(other.value) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return SetMutation;\n}(Mutation));\nexport { SetMutation };\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar PatchMutation = /** @class */ (function (_super) {\n    __extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.isEqual = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.isEqual(other.key) &&\n            this.fieldMask.isEqual(other.fieldMask) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(Mutation));\nexport { PatchMutation };\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar TransformMutation = /** @class */ (function (_super) {\n    __extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime, baseDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.isEqual = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.isEqual(other.key) &&\n            misc.arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @param baseDoc The document prior to applying this mutation batch.\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                var previousValue = null;\n                if (baseDoc instanceof Document) {\n                    previousValue = baseDoc.field(fieldTransform.field) || null;\n                }\n                transformResults.push(new ServerTimestampValue(localWriteTime, previousValue));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(Mutation));\nexport { TransformMutation };\n/** A mutation that deletes the document at the given key. */\nvar DeleteMutation = /** @class */ (function (_super) {\n    __extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new NoDocument(this.key, SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.isEqual = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.isEqual(other.key) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return DeleteMutation;\n}(Mutation));\nexport { DeleteMutation };\n\n//# sourceMappingURL=mutation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.isEqual = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\nexport { ExistenceFilter };\n\n//# sourceMappingURL=existence_filter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/existence_filter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.isEqual = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\nexport { SortedSet };\n\n//# sourceMappingURL=sorted_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n         * The snapshot version this event brings us up to, or MIN if not set.\n         */\n        snapshotVersion, \n        /**\n         * A map from target to changes to the target. See TargetChange.\n         */\n        targetChanges, \n        /**\n         * A set of which documents have changed or been deleted, along with the\n         * doc's new values (if not deleted).\n         */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\nexport { RemoteEvent };\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport var CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.isEqual = function (other) {\n        return other !== null && this.docs.isEqual(other.docs);\n    };\n    return ResetMapping;\n}());\nexport { ResetMapping };\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.isEqual = function (other) {\n        return (other !== null &&\n            this.addedDocuments.isEqual(other.addedDocuments) &&\n            this.removedDocuments.isEqual(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\nexport { UpdateMapping };\n\n//# sourceMappingURL=remote_event.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_event.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\nexport { StreamBridge };\n\n//# sourceMappingURL=stream_bridge.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/stream_bridge.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ErrorCode, EventType, WebChannel, XhrIoPool, createWebChannelTransport } from '@firebase/webchannel-wrapper';\nimport { SDK_VERSION } from '../core/version';\nimport { mapCodeFromHttpStatus, mapCodeFromRpcStatus } from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new XhrIoPool();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            // tslint:disable-next-line:no-any XhrIoPool doesn't have TS typings.\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(EventType.COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case ErrorCode.NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                log.debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case ErrorCode.TIMEOUT:\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case ErrorCode.HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                log.debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = createWebChannelTransport();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        log.debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        var streamBridge = new StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        log.debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    log.debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(WebChannel.EventType.OPEN, function () {\n            if (!closed) {\n                log.debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = \n                // tslint:disable-next-line:no-any msgData.error is not typed.\n                msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    log.debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    log.debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\nexport { WebChannelConnection };\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { WebChannelConnection } from './webchannel_connection';\nvar BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\nexport { BrowserPlatform };\n\n//# sourceMappingURL=browser_platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_init.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Describes the online state of the Firestore client. Note that this does not\n * indicate whether or not the remote store is trying to connect or not. This is\n * primarily used by the View / EventManager code to change their behavior while\n * offline (e.g. get() calls shouldn't wait for data from the server and\n * snapshot events should set metadata.isFromCache=true).\n */\nexport var OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it is currently\n     * trying to establish a connection, but it has not succeeded or failed yet.\n     * Higher-level components should not operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * successful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client is either trying to establish a connection but failing, or it\n     * has been explicitly marked offline via a call to disableNetwork().\n     * Higher-level components should operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nexport var ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nexport var SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\nexport { DocumentChangeSet };\nvar ViewSnapshot = /** @class */ (function () {\n    function ViewSnapshot(query, docs, oldDocs, docChanges, fromCache, hasPendingWrites, syncStateChanged) {\n        this.query = query;\n        this.docs = docs;\n        this.oldDocs = oldDocs;\n        this.docChanges = docChanges;\n        this.fromCache = fromCache;\n        this.hasPendingWrites = hasPendingWrites;\n        this.syncStateChanged = syncStateChanged;\n    }\n    ViewSnapshot.prototype.isEqual = function (other) {\n        if (this.fromCache !== other.fromCache ||\n            this.hasPendingWrites !== other.hasPendingWrites ||\n            this.syncStateChanged !== other.syncStateChanged ||\n            !this.query.isEqual(other.query) ||\n            !this.docs.isEqual(other.docs) ||\n            !this.oldDocs.isEqual(other.oldDocs)) {\n            return false;\n        }\n        var changes = this.docChanges;\n        var otherChanges = other.docChanges;\n        if (changes.length !== otherChanges.length) {\n            return false;\n        }\n        for (var i = 0; i < changes.length; i++) {\n            if (changes[i].type !== otherChanges[i].type ||\n                !changes[i].doc.isEqual(otherChanges[i].doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ViewSnapshot;\n}());\nexport { ViewSnapshot };\n\n//# sourceMappingURL=view_snapshot.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view_snapshot.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\nexport { TargetIdGenerator };\n\n//# sourceMappingURL=target_id_generator.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/target_id_generator.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { documentMap } from './collections';\nimport { DocumentKey } from './document_key';\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.isEqual(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\nexport { DocumentSet };\n\n//# sourceMappingURL=document_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as objUtil from './obj';\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.isEqual(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        objUtil.forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return objUtil.isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\nexport { ObjectMap };\n\n//# sourceMappingURL=obj_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnlineState } from './types';\nimport { ChangeType, ViewSnapshot } from './view_snapshot';\nimport { DocumentSet } from '../model/document_set';\nimport { assert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.applyOnlineStateChange(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.applyOnlineStateChange(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\nexport { EventManager };\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.fromCache, snap.hasPendingWrites, snap.syncStateChanged);\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = new ViewSnapshot(snap.query, snap.docs, DocumentSet.emptySet(snap.docs), QueryListener.getInitialViewChanges(snap), snap.fromCache, snap.hasPendingWrites, true);\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\nexport { QueryListener };\n\n//# sourceMappingURL=event_manager.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/event_manager.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.\n        this.nextCallback = null;\n        // tslint:disable-next-line:no-any Accept any result type for the error handler.\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = undefined;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            // tslint:disable-next-line:no-any\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (\n        // tslint:disable-next-line:no-any Accept all Promise types in waitFor().\n        all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        // tslint:disable-next-line:no-any\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\nexport { PersistencePromise };\n\n//# sourceMappingURL=persistence_promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/persistence_promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\nexport { EagerGarbageCollector };\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/eager_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeType } from '../core/view_snapshot';\nimport { documentKeySet } from '../model/collections';\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\nexport { LocalViewChanges };\n\n//# sourceMappingURL=local_view_changes.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_view_changes.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(firstRef !== null && key.isEqual(firstRef.key));\n    };\n    return ReferenceSet;\n}());\nexport { ReferenceSet };\nvar DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\nexport { DocReference };\n\n//# sourceMappingURL=reference_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/reference_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { ExponentialBackoff } from './backoff';\nimport { isNullOrUndefined } from '../util/types';\nvar LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.idle = false;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Initializes the idle timer. If no write takes place within one minute, the\n     * WebChannel stream will be closed.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        this.idle = true;\n        this.queue\n            .schedule(function () {\n            return _this.handleIdleCloseTimer();\n        }, IDLE_TIMEOUT_MS)\n            .catch(function (err) {\n            // When the AsyncQueue gets drained during testing, pending Promises\n            // (including these idle checks) will get rejected. We special-case\n            // these cancelled idle checks to make sure that these specific Promise\n            // rejections are not considered unhandled.\n            assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n        });\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        if (this.isOpen() && this.idle) {\n            // When timing out an idle stream there's no reason to force the stream into backoff when\n            // it restarts so set the stream state to Initial instead of Error.\n            return this.close(PersistentStreamState.Initial);\n        }\n        return Promise.resolve();\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        this.idle = false;\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n        this.cancelIdleCheck();\n        if (finalState !== PersistentStreamState.Error) {\n            // If this is an intentional close ensure we don't delay our next connection attempt.\n            this.backoff.reset();\n        }\n        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n            log.error(error.toString());\n            log.error('Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        // Clean up the underlying stream because we are no longer interested in events.\n        if (this.stream !== null) {\n            this.tearDown();\n            this.stream.close();\n            this.stream = null;\n        }\n        // This state must be assigned before calling onClose() to allow the callback to\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\n        this.state = finalState;\n        var listener = this.listener;\n        // Clear the listener to avoid bleeding of events from the underlying streams.\n        this.listener = null;\n        // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n        // could trigger undesirable recovery logic, etc.).\n        if (finalState !== PersistentStreamState.Stopped) {\n            return listener.onClose(error);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the stream instance has not changed\n                if (_this.stream === stream) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start(listener);\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        log.debug(LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\nexport { PersistentStream };\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    __extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(PersistentStream));\nexport { PersistentListenStream };\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar PersistentWriteStream = /** @class */ (function (_super) {\n    __extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(PersistentStream));\nexport { PersistentWriteStream };\n\n//# sourceMappingURL=persistent_stream.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/persistent_stream.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { ReferenceSet } from '../local/reference_set';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { CurrentStatusUpdate, RemoteEvent } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\nimport { isNullOrUndefined } from '../util/types';\nimport { Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { AddedLimboDocument, RemovedLimboDocument, View } from './view';\nvar LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new ReferenceSet();\n        this.limboCollector = new EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    /**\n     * Applies an OnlineState change to the sync engine and notifies any views of\n     * the change.\n     */\n    SyncEngine.prototype.applyOnlineStateChange = function (onlineState) {\n        var newViewSnapshots = [];\n        this.queryViewsByQuery.forEach(function (query, queryView) {\n            var viewChange = queryView.view.applyOnlineStateChange(onlineState);\n            assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');\n            if (viewChange.snapshot) {\n                newViewSnapshots.push(viewChange.snapshot);\n            }\n        });\n        this.viewHandler(newViewSnapshots);\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new SortedMap(DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));\n            var event_1 = new RemoteEvent(SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                log.debug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            log.debug(LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n\n//# sourceMappingURL=sync_engine.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/sync_engine.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet, documentVersionMap } from './collections';\nimport { assert } from '../util/assert';\nimport * as misc from '../util/misc';\nexport var BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var baseDoc = maybeDoc;\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.isEqual = function (other) {\n        return (this.batchId === other.batchId &&\n            misc.arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\nexport { MutationBatch };\n/** The result of applying a mutation batch to the backend. */\nvar MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\nexport { MutationBatchResult };\n\n//# sourceMappingURL=mutation_batch.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation_batch.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbQueryCache } from './indexeddb_query_cache';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { ALL_STORES, DbOwner } from './indexeddb_schema';\nimport { createOrUpgradeDb, SCHEMA_VERSION } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDb } from './simple_db';\nvar LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        log.debug(LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    log.debug(LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    log.debug(LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log.error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log.error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            log.debug(LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\nexport { IndexedDbPersistence };\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet, documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\nexport { LocalDocumentsView };\n\n//# sourceMappingURL=local_documents_view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_documents_view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\nexport { RemoteDocumentChangeBuffer };\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryData, QueryPurpose } from './query_data';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nvar LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n         * The garbage collector collects documents that should no longer be\n         * cached (e.g. if they are no longer retained by the above reference sets\n         * and the garbage collector is performing eager collection).\n         */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.isEqual(SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        log.debug(LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (objUtils.isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            objUtils.isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\nexport { LocalStore };\n\n//# sourceMappingURL=local_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\nvar MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n        }\n        return PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return PersistencePromise.resolve(batch);\n            }\n        }\n        return PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new DocReference(documentKey, 0);\n        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.isEqual(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new DocReference(new DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\nexport { MemoryMutationQueue };\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ObjectMap } from '../util/obj_map';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nvar MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\nexport { MemoryQueryCache };\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { PersistencePromise } from './persistence_promise';\nvar MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\nexport { MemoryRemoteDocumentCache };\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new MemoryRemoteDocumentCache();\n        this.queryCache = new MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\nexport { MemoryPersistence };\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\nexport { NoOpGarbageCollector };\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as log from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n         * The initial delay (used as the base delay on the first retry attempt).\n         * Note that jitter will still be applied, so the actual delay could be as\n         * little as 0.5*initialDelayMs.\n         */\n        initialDelayMs, \n        /**\n         * The multiplier to use to determine the extended base delay after each\n         * attempt.\n         */\n        backoffFactor, \n        /**\n         * The maximum base delay after which no further backoff is performed.\n         * Note that jitter will still be applied, so the actual delay could be as\n         * much as 1.5*maxDelayMs.\n         */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            log.debug(LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\nexport { ExponentialBackoff };\n\n//# sourceMappingURL=backoff.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/backoff.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistentListenStream, PersistentWriteStream } from './persistent_stream';\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\nexport { Datastore };\n\n//# sourceMappingURL=datastore.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/datastore.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from './snapshot_version';\nimport { documentVersionMap } from '../model/collections';\nimport { NoDocument } from '../model/document';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { Code, FirestoreError } from '../util/error';\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.isEqual(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return Precondition.updateTime(version);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.isEqual(SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\nexport { Transaction };\n\n//# sourceMappingURL=transaction.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/transaction.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState } from '../core/types';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { ResetMapping, UpdateMapping } from './remote_event';\nimport { isPermanentError } from './rpc_error';\nimport { WatchChangeAggregator, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    /**\n     * Updates our OnlineState to the new state, updating local state\n     * and notifying the onlineStateHandler as appropriate. Idempotent.\n     */\n    RemoteStore.prototype.updateOnlineState = function (newState) {\n        if (newState !== this.watchStreamOnlineState) {\n            if (newState === OnlineState.Healthy) {\n                // We've connected to watch at least once. Don't warn the developer about\n                // being offline going forward.\n                this.shouldWarnOffline = false;\n            }\n            else if (newState === OnlineState.Unknown) {\n                // The state is set to unknown when a healthy stream is closed (e.g. due to\n                // a token timeout) or when we have no active listens and therefore there's\n                // no need to start the stream. Assuming there is (possibly in the future)\n                // an active listen, then we will eventually move to state Online or Failed,\n                // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n                // attempts before failing, so we reset the count here.\n                this.watchStreamFailures = 0;\n            }\n            this.watchStreamOnlineState = newState;\n            this.onlineStateHandler(newState);\n        }\n    };\n    /**\n     * Updates our OnlineState as appropriate after the watch stream reports a\n     * failure. The first failure moves us to the 'Unknown' state. We then may\n     * allow multiple failures (based on ONLINE_ATTEMPTS_BEFORE_FAILURE) before we\n     * actually transition to OnlineState.Failed.\n     */\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.updateOnlineState(OnlineState.Unknown);\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log.error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) === (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Idempotent. */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        if (this.isNetworkEnabled()) {\n            return Promise.resolve();\n        }\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /**\n     * Temporarily disables the network. The network can be re-enabled using\n     * enableNetwork().\n     */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.disableNetworkInternal();\n        // Set the OnlineState to failed so get()'s return from cache, etc.\n        this.updateOnlineState(OnlineState.Failed);\n        return Promise.resolve();\n    };\n    /**\n     * Disables the network, if it is currently enabled.\n     */\n    RemoteStore.prototype.disableNetworkInternal = function () {\n        if (this.isNetworkEnabled()) {\n            // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n            // event).\n            this.watchStream.stop();\n            this.writeStream.stop();\n            this.cleanUpWatchStreamState();\n            this.cleanUpWriteStreamState();\n            this.writeStream = null;\n            this.watchStream = null;\n        }\n    };\n    RemoteStore.prototype.shutdown = function () {\n        log.debug(LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetworkInternal();\n        // Set the OnlineState to Unknown (rather than Failed) to avoid potentially\n        // triggering spurious listener events with cached data, etc.\n        this.updateOnlineState(OnlineState.Unknown);\n        return Promise.resolve();\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!objUtils.contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(objUtils.contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (objUtils.isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !objUtils.isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        objUtils.forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.updateOnlineState(OnlineState.Unknown);\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.updateOnlineState(OnlineState.Healthy);\n        if (watchChange instanceof WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.isEqual(SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        objUtils.forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new DocumentKey(query.path);\n                    var deletedDoc = new NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (objUtils.contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        log.debug(LOG_TAG, 'Stopping write stream with ' +\n            this.pendingWrites.length +\n            ' pending writes');\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    if (_this.pendingWrites.length === 0) {\n                        _this.writeStream.markIdle();\n                    }\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // If the write stream closed due to an error, invoke the error callbacks if\n        // there are pending writes.\n        if (error && this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            log.debug(LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        log.debug(LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // If the network has been explicitly disabled, make sure we don't\n        // accidentally re-enable it.\n        if (this.isNetworkEnabled()) {\n            // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n            // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n            // (since mutations are per-user).\n            this.disableNetworkInternal();\n            this.updateOnlineState(OnlineState.Unknown);\n            return this.enableNetwork();\n        }\n    };\n    return RemoteStore;\n}());\nexport { RemoteStore };\n\n//# sourceMappingURL=remote_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventManager, QueryListener } from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport { LocalStore } from '../local/local_store';\nimport { MemoryPersistence } from '../local/memory_persistence';\nimport { NoOpGarbageCollector } from '../local/no_op_garbage_collector';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Code } from '../util/error';\nimport { debug } from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n         * Asynchronous queue responsible for all of our internal processing. When\n         * we get incoming work from the user (via public API) or the network\n         * (incoming GRPC messages), we should always schedule onto this queue.\n         * This ensures all of our work is properly serialized (e.g. we don't\n         * start processing a new operation while the previous one is waiting for\n         * an async I/O to complete).\n         */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new NoOpGarbageCollector();\n        var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new EagerGarbageCollector();\n        this.persistence = new MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.syncEngine.applyOnlineStateChange(onlineState);\n                _this.eventMgr.applyOnlineStateChange(onlineState);\n            };\n            _this.remoteStore = new RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\nexport { FirestoreClient };\n\n//# sourceMappingURL=firestore_client.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/firestore_client.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\nexport { AsyncObserver };\n\n//# sourceMappingURL=async_observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\nimport * as log from './log';\nimport { Deferred } from './promise';\nimport { Code, FirestoreError } from './error';\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // A list with timeout handles and their respective deferred promises.\n        // Contains an entry for each operation that is queued to run in the future\n        // (i.e. it has a delay that has not yet elapsed). Prior to cleanup, this list\n        // may also contain entries that have already been run (in which case `handle` is\n        // null).\n        this.delayedOperations = [];\n        // The number of operations that are queued to be run in the future (i.e. they\n        // have a delay that has not yet elapsed). Unlike `delayedOperations`, this\n        // is guaranteed to only contain operations that have not yet been run.\n        //\n        // Visible for testing.\n        this.delayedOperationsCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay (in milliseconds) to wait before queuing the\n     * operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOperationsCount++;\n            var delayedOp_1 = {\n                handle: null,\n                op: op,\n                deferred: new Deferred()\n            };\n            delayedOp_1.handle = setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return delayedOp_1.op().then(function (result) {\n                        delayedOp_1.deferred.resolve(result);\n                    });\n                });\n                delayedOp_1.handle = null;\n                _this.delayedOperationsCount--;\n                if (_this.delayedOperationsCount === 0) {\n                    _this.delayedOperations = [];\n                }\n            }, delay);\n            this.delayedOperations.push(delayedOp_1);\n            return delayedOp_1.deferred.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log.error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently scheduled tasks are finished executing. Tasks\n     * scheduled with a delay can be rejected or queued for immediate execution.\n     */\n    AsyncQueue.prototype.drain = function (executeDelayedTasks) {\n        var _this = this;\n        this.delayedOperations.forEach(function (entry) {\n            if (entry.handle) {\n                clearTimeout(entry.handle);\n                if (executeDelayedTasks) {\n                    _this.scheduleInternal(entry.op).then(entry.deferred.resolve, entry.deferred.reject);\n                }\n                else {\n                    entry.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled by shutdown'));\n                }\n            }\n        });\n        this.delayedOperations = [];\n        this.delayedOperationsCount = 0;\n        return this.schedule(function () { return Promise.resolve(); });\n    };\n    return AsyncQueue;\n}());\nexport { AsyncQueue };\n\n//# sourceMappingURL=async_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.isEqual = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\nexport { User };\n\n//# sourceMappingURL=user.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/auth/user.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    FieldValueImpl.prototype.isEqual = function (other) {\n        return this === other;\n    };\n    return FieldValueImpl;\n}());\nexport { FieldValueImpl };\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    __extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\nexport { DeleteFieldValueImpl };\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    __extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\nexport { ServerTimestampFieldValueImpl };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_value.js\n// module id = null\n// module chunks = ","(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.H=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Cb=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.w=this.w}var qa=0,ra={};w.prototype.i=!1;w.prototype.Z=function(){if(!this.i&&(this.i=!0,this.A(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.A=function(){if(this.w)for(;this.w.length;)this.w.shift()()};var sa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Ra=function(){var a=x;if(Ma)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:\"\");if(z){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ja={};\nfunction Ta(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Ua;var Va=k.document;\nUa=Va&&z?Oa()||(\"CSS1Compat\"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!z||9<=Number(Ua),Ya=z&&!Ta(\"9\"),Za=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Pa=!0}A.prototype.b=function(){this.Pa=!1};function $a(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:ab[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u($a,A);var ab=Wa({2:\"touch\",3:\"pen\",4:\"mouse\"});$a.prototype.b=function(){$a.H.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var bb=\"closure_listenable_\"+(1E6*Math.random()|0);function cb(a){return!(!a||!a[bb])}var db=0;function eb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++db;this.Y=this.ca=!1}function fb(a){a.Y=!0;a.listener=null;a.a=null;a.src=null;a.ga=null};function gb(a){this.src=a;this.a={};this.b=0}gb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=hb(a,b,d,e);-1<h?(b=a[h],c||(b.ca=!1)):(b=new eb(b,this.src,f,!!d,e),b.ca=c,a.push(b));return b};function ib(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(fb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function jb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=hb(a,c,d,e));return-1<b?a[b]:null}\nfunction hb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Y&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.aa(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new gb(a));c=m.add(b,c,d,h,f);if(c.a)return c;d=sb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.Ha(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}function vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=pb(c),cb(a)?a.va(b,c,d,e):a&&(a=rb(a))&&(b=jb(a,b,c,d,e))&&wb(b)}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Y){var b=a.src;if(cb(b))ib(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(ib(c,a),0==c.b&&(c.src=null,b[kb]=null)):fb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Y&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ca&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Y)return!0;if(!Xa){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new $a(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew $a(b,this))}function rb(a){a=a[kb];return a instanceof gb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function B(){w.call(this);this.c=new gb(this);this.P=this;this.K=null}u(B,w);B.prototype[bb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.K;if(c)for(b=[];c;c=c.K)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.A=function(){B.H.A.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,fb(d[e]);delete a.a[c];a.b--}}this.K=null};g.aa=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Ha=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};g.va=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=hb(f,b,c,d);-1<b&&(fb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--))}};\nfunction Ab(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Y&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ca&&ib(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Pa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Lb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Lb(){this.next=this.b=this.a=null}Lb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Lb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.za;c.za=null;a()}};return function(a){d.next={za:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.kb,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.$=!1;g.L=null;g.kb=function(){if(this.$){var a=t()-this.g;0<a&&a<.8*this.b?this.L=this.a.setTimeout(this.f,this.b-a):(this.L&&(this.a.clearTimeout(this.L),this.L=null),this.dispatchEvent(\"tick\"),this.$&&(this.L=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.$=!0;this.L||(this.L=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.$=!1;a.L&&(a.a.clearTimeout(a.L),a.L=null)}g.A=function(){Xb.H.A.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.eb,this);this.a=[]}u($b,w);g=$b.prototype;g.ha=!1;g.X=null;g.Xa=function(a){this.a=arguments;this.X?this.ha=!0:ac(this)};g.A=function(){$b.H.A.call(this);this.X&&(k.clearTimeout(this.X),this.X=null,this.ha=!1,this.a=[])};g.eb=function(){this.X=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.X=Zb(a.b,a.c);a.f.apply(null,a.a)};function C(a){w.call(this);this.b=a;this.a={}}u(C,w);var bc=[];C.prototype.aa=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=nb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nC.prototype.va=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.va(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=pb(c),d=!!d,b=cb(a)?jb(a.c,String(b),c,d,e):a?(a=rb(a))?jb(a,b,c,d,e):null:null,b&&(wb(b),delete this.a[b.key])};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}C.prototype.A=function(){C.H.A.call(this);cc(this)};C.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c){this.reset(a,b,c,void 0,void 0)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function D(a,b){this.name=a;this.value=b}D.prototype.toString=function(){return this.name};var gc=new D(\"SEVERE\",1E3),hc=new D(\"WARNING\",900),ic=new D(\"INFO\",800),jc=new D(\"CONFIG\",700),kc=new D(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}fc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar mc={},nc=null;function oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function E(a,b){a&&a.log(hc,b,void 0)}function pc(a,b){a&&a.log(ic,b,void 0)}function F(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}qc.prototype.Ea=function(){this.b=!1};function rc(a,b,c,d,e,f){H(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var G=m[v].split(\"=\");if(1<G.length){var Z=G[0];G=G[1];var Mb=Z.split(\"_\");h=2<=Mb.length&&\"type\"==Mb[1]?h+(Z+\"=\"+G+\"&\"):h+(Z+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction sc(a,b,c,d,e,f,h){H(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function tc(a,b,c,d){H(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+uc(a,c)+(d?\" \"+d:\"\")})}function vc(a,b){H(a,function(){return\"TIMEOUT: \"+b})}function I(a,b){F(a.a,b)}function wc(a,b,c){(a=a.a)&&a.log(gc,c||\"Exception\",b)}function H(a,b){pc(a.a,b)}function xc(a,b){(a=a.a)&&a.log(gc,b,void 0)}\nfunction uc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return I(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var yc=new B;function zc(a){A.call(this,\"serverreachability\",a)}u(zc,A);function Ac(a){yc.dispatchEvent(new zc(yc,a))}function Bc(a){A.call(this,\"statevent\",a)}u(Bc,A);function J(a){yc.dispatchEvent(new Bc(yc,a))}function Cc(a){A.call(this,\"timingevent\",a)}u(Cc,A);function Dc(a,b,c){yc.dispatchEvent(new Cc(yc,a,b,c))}function Ec(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Fc={NO_ERROR:0,lb:1,sb:2,rb:3,ob:4,qb:5,tb:6,Ra:7,TIMEOUT:8,wb:9};var Gc={nb:\"complete\",Ab:\"success\",Sa:\"error\",Ra:\"abort\",yb:\"ready\",zb:\"readystatechange\",TIMEOUT:\"timeout\",ub:\"incrementaldata\",xb:\"progress\",pb:\"downloadprogress\",Bb:\"uploadprogress\"};function Hc(){}Hc.prototype.a=null;function Ic(a){var b;(b=a.a)||(b={},Jc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Kc;function Lc(){}u(Lc,Hc);function Mc(a){return(a=Jc(a))?new ActiveXObject(a):new XMLHttpRequest}function Jc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Kc=new Lc;function K(a,b,c,d){this.i=a;this.b=b;this.f=c;this.T=d||1;this.N=new C(this);this.S=Nc;a=this.I=new Xb;a.b=Oc;a.L&&a.$?(Yb(a),a.start()):a.L&&Yb(a);this.j=null;this.c=!1;this.m=this.g=this.h=this.K=this.D=this.U=this.w=null;this.u=[];this.a=null;this.F=0;this.l=this.o=null;this.C=-1;this.B=!1;this.P=0;this.J=null;this.M=!1}var Nc=45E3,Oc=250;\nfunction Pc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Qc={},Rc={};g=K.prototype;g.setTimeout=function(a){this.S=a};function Sc(a,b,c){a.K=1;a.h=Tc(L(b));a.m=c;a.M=!0;Uc(a,null)}function Vc(a,b,c,d){a.K=1;a.h=Tc(L(b));a.m=null;a.M=c;Uc(a,d)}\nfunction Uc(a,b){a.D=t();Wc(a);a.g=L(a.h);Xc(a.g,\"t\",a.T);a.F=0;a.a=a.i.da(a.i.ia()?b:null);0<a.P&&(a.J=new $b(r(a.Qa,a,a.a),a.P));a.N.aa(a.a,\"readystatechange\",a.hb);b=a.j?Ea(a.j):{};a.m?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.m,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));Ac(1);rc(a.b,a.o,a.g,a.f,a.T,a.m)}g.hb=function(a){a=a.target;var b=this.J;b&&3==M(a)?(I(this.b,\"Throttling readystatechange.\"),b.Xa()):this.Qa(a)};\ng.Qa=function(a){try{a==this.a?Yc(this):E(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;wc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else wc(this.b,c,\"No response text\")}finally{}};\nfunction Yc(a){var b=M(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Ka&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?Ac(3):Ac(2));Zc(a);var e=a.a.W();a.C=e;(c=a.a.V())||I(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.c=200==e;sc(a.b,a.o,a.g,a.f,a.T,b,e);a.c?(a.M?($c(a,b,c),Ka&&a.c&&3==b&&ad(a)):(tc(a.b,a.f,c,null),bd(a,c)),4==b&&cd(a),a.c&&!a.B&&(4==b?a.i.ua(a):(a.c=!1,Wc(a)))):(400==e&&0<c.indexOf(\"Unknown SID\")?(a.l=3,J(12),E(a.b.a,\"XMLHTTP Unknown SID (\"+a.f+\")\")):(a.l=0,J(13),\nE(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.f+\")\")),cd(a),dd(a))}}function $c(a,b,c){for(var d=!0;!a.B&&a.F<c.length;){var e=ed(a,c);if(e==Rc){4==b&&(a.l=4,J(14),d=!1);tc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Qc){a.l=4;J(15);tc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else tc(a.b,a.f,e,null),bd(a,e)}4==b&&0==c.length&&(a.l=1,J(16),d=!1);a.c=a.c&&d;d||(tc(a.b,a.f,c,\"[Invalid Chunked Response]\"),cd(a),dd(a))}\ng.gb=function(){var a=M(this.a),b=this.a.V();this.F<b.length&&(Zc(this),$c(this,a,b),this.c&&4!=a&&Wc(this))};function ad(a){a.N.aa(a.I,\"tick\",a.gb);a.I.start()}function ed(a,b){var c=a.F,d=b.indexOf(\"\\n\",c);if(-1==d)return Rc;c=Number(b.substring(c,d));if(isNaN(c))return Qc;d+=1;if(d+c>b.length)return Rc;b=b.substr(d,c);a.F=d+c;return b}g.cancel=function(){this.B=!0;cd(this)};function Wc(a){a.U=t()+a.S;fd(a,a.S)}\nfunction fd(a,b){if(null!=a.w)throw Error(\"WatchDog timer not null\");a.w=Ec(r(a.fb,a),b)}function Zc(a){a.w&&(k.clearTimeout(a.w),a.w=null)}g.fb=function(){this.w=null;var a=t();0<=a-this.U?(this.c&&xc(this.b,\"Received watchdog timeout even though request loaded successfully\"),vc(this.b,this.g),2!=this.K&&(Ac(3),J(17)),cd(this),this.l=2,dd(this)):(E(this.b.a,\"WatchDog timer called too early\"),fd(this,this.U-a))};function dd(a){a.i.Ja()||a.B||a.i.ua(a)}\nfunction cd(a){Zc(a);var b=a.J;b&&\"function\"==typeof b.Z&&b.Z();a.J=null;Yb(a.I);cc(a.N);a.a&&(b=a.a,a.a=null,b.abort(),b.Z())}function bd(a,b){try{a.i.Ma(a,b),Ac(4)}catch(c){wc(a.b,c,\"Error in httprequest callback\")}};function gd(a){if(a.v&&\"function\"==typeof a.v)return a.v();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction hd(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.v&&\"function\"==typeof a.v)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=gd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof N?(c=a.O(),d=a.v()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=N.prototype;g.s=function(){return this.c};g.v=function(){id(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){id(this);return this.a.concat()};\nfunction jd(a){a.b={};a.a.length=0;a.c=0}function kd(a,b){return O(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&id(a),!0):!1}function id(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return O(this.b,a)?this.b[a]:b};g.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var ld=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function md(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function P(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof P?(this.h=void 0!==b?b:a.h,nd(this,a.f),this.j=a.j,od(this,a.b),pd(this,a.i),this.a=a.a,qd(this,rd(a.c)),this.g=a.g):a&&(c=String(a).match(ld))?(this.h=!!b,nd(this,c[1]||\"\",!0),this.j=sd(c[2]||\"\"),od(this,c[3]||\"\",!0),pd(this,c[4]),this.a=sd(c[5]||\"\",!0),qd(this,c[6]||\"\",!0),this.g=sd(c[7]||\"\")):(this.h=!!b,this.c=new td(null,this.h))}\nP.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ud(b,vd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ud(b,vd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ud(c,\"/\"==c.charAt(0)?wd:xd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ud(c,yd));return a.join(\"\")};\nP.prototype.resolve=function(a){var b=L(this),c=!!a.f;c?nd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?od(b,a.b):c=null!=a.i;var d=a.a;if(c)pd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?qd(b,rd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function L(a){return new P(a)}function nd(a,b,c){a.f=c?sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function od(a,b,c){a.b=c?sd(b,!0):b}function pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function qd(a,b,c){b instanceof td?(a.c=b,zd(a.c,a.h)):(c||(b=ud(b,Ad)),a.c=new td(b,a.h))}\nfunction Q(a,b,c){a.c.set(b,c)}function Xc(a,b,c){n(c)||(c=[String(c)]);Bd(a.c,b,c)}function Tc(a){Q(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function Cd(a){return a instanceof P?L(a):new P(a,void 0)}function Dd(a,b,c,d){var e=new P(null,void 0);a&&nd(e,a);b&&od(e,b);c&&pd(e,c);d&&(e.a=d);return e}function sd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ud(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Ed),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Ed(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var vd=/[#\\/\\?@]/g,xd=/[#\\?:]/g,wd=/[#\\?]/g,Ad=/[#\\?@]/g,yd=/#/g;function td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function R(a){a.a||(a.a=new N,a.b=0,a.c&&md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=td.prototype;g.s=function(){R(this);return this.b};\ng.add=function(a,b){R(this);this.c=null;a=Fd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Gd(a,b){R(a);b=Fd(a,b);O(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,kd(a.a,b))}function Hd(a,b){R(a);b=Fd(a,b);return O(a.a.b,b)}g.forEach=function(a,b){R(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){R(this);for(var a=this.a.v(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.v=function(a){R(this);var b=[];if(l(a))Hd(this,a)&&(b=xa(b,this.a.get(Fd(this,a))));else{a=this.a.v();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){R(this);this.c=null;a=Fd(this,a);Hd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.v(a):[];return 0<a.length?String(a[0]):b};\nfunction Bd(a,b,c){Gd(a,b);0<c.length&&(a.c=null,a.a.set(Fd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.v(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function rd(a){var b=new td;b.c=a.c;a.a&&(b.a=new N(a.a),b.b=a.b);return b}\nfunction Fd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function zd(a,b){b&&!a.f&&(R(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Gd(this,b),Bd(this,c,a))},a));a.f=b};function Id(){this.a=t()}var Jd=null;Id.prototype.set=function(a){this.a=a};Id.prototype.reset=function(){this.set(t())};Id.prototype.get=function(){return this.a};function Kd(){Jd||(Jd=new Id)}function Ld(){Jd||(Jd=new Id)}u(Ld,Kd);function Md(){}var Nd={OPEN:\"a\",mb:\"b\",Sa:\"c\",vb:\"d\"};function Od(){A.call(this,\"d\")}u(Od,A);function Pd(){A.call(this,\"c\")}u(Pd,A);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Qd.prototype;g.R=null;\nfunction Rd(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.I.a;if(null!=b)I(a.b,function(){return\"TestConnection: skipping stage 2, precomputed result is \"+b?\"Buffered\":\"Unbuffered\"}),J(4),b?(J(10),Sd(a.a,a,!1)):(J(11),Sd(a.a,a,!0));else{a.c=new K(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.l);J(4);Xc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.K;d&&e&&Q(c,d,e);Vc(a.c,c,!1,a.g)}}g.da=function(a){return this.a.da(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ja=function(){return!1};\ng.Ma=function(a,b){this.f=a.C;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.D&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.K=a:E(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.ma.a.parse(b)}catch(e){wc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==\nthis.R)if(this.h)J(6);else if(\"11111\"==b){if(J(5),this.h=!0,!z||10<=Number(Ua))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)}else J(7),this.h=!1};\ng.ua=function(){this.f=this.c.C;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),J(10),Sd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?J(8):1==this.R&&J(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.ra=function(){return this.a.ra()};function Vd(){this.a=this.b=null};function S(){this.a=new N}function Wd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}S.prototype.s=function(){return this.a.s()};S.prototype.add=function(a){this.a.set(Wd(a),a)};S.prototype.contains=function(a){a=Wd(a);return O(this.a.b,a)};S.prototype.v=function(){return this.a.v()};function Xd(a,b){this.a=a;this.b=b};function Yd(a){this.g=a||Zd;this.f=k.pa&&k.pa.Ka&&k.pa.Ka()&&k.pa.Ka().Db?this.g:1;this.a=null;1<this.f&&(this.a=new S);this.b=null;this.c=[]}var Zd=10;function $d(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new S,a.b&&(ae(a,a.b),a.b=null))}function be(a){return a.b?!0:a.a?a.a.s()>=a.f:!1}function ce(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function ae(a,b){a.a?a.a.add(b):a.b=b}\nfunction de(a,b){a.b&&a.b==b?a.b=null:a.a&&a.a.contains(b)&&kd(a.a.a,Wd(b))}Yd.prototype.cancel=function(){this.c=ee(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.v(),function(a){a.cancel()}),jd(this.a.a))};function ee(a){if(null!=a.b)return a.c.concat(a.b.u);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ta(a.a.v(),function(a){b=b.concat(a.u)});return b}return ya(a.c)}function fe(a,b){a.c=a.c.concat(b)};function ge(){}ge.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};ge.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function he(){this.a=new ge}function ie(a,b,c){var d=c||\"\";try{hd(a,function(a,c){var e=a;p(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function je(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(ke,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(ke,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(ke,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(ke,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function ke(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){wc(a,f)}};function T(a){B.call(this);this.headers=new N;this.F=a||null;this.f=!1;this.D=this.a=null;this.M=this.u=\"\";this.j=0;this.g=\"\";this.h=this.J=this.o=this.I=!1;this.l=0;this.B=null;this.N=le;this.C=this.m=!1}u(T,B);var le=\"\";T.prototype.b=oc(\"goog.net.XhrIo\");var me=/^https?$/i,ne=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.u+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.u=a;this.g=\"\";this.j=0;this.M=b;this.I=!1;this.f=!0;this.a=this.F?Mc(this.F):Mc(Kc);this.D=this.F?Ic(this.F):Ic(Kc);this.a.onreadystatechange=r(this.La,this);try{F(this.b,U(this,\"Opening Xhr\")),this.J=!0,this.a.open(b,String(a),!0),this.J=!1}catch(f){F(this.b,U(this,\"Error opening Xhr: \"+f.message));oe(this,f);return}a=c||\"\";var e=new N(this.headers);\nd&&hd(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(ne,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{pe(this),0<this.l&&(this.C=qe(this.a),F(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ia,this)):this.B=Zb(this.Ia,this.l,this)),F(this.b,U(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){F(this.b,U(this,\"Send error: \"+f.message)),oe(this,f)}};function qe(a){return z&&Ta(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ia=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,F(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function oe(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;re(a);se(a)}function re(a){a.I||(a.I=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(F(this.b,U(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),se(this))};g.A=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),se(this,!0));T.H.A.call(this)};g.La=function(){this.i||(this.J||this.o||this.h?te(this):this.cb())};g.cb=function(){te(this)};\nfunction te(a){if(a.f&&\"undefined\"!=typeof goog)if(a.D[1]&&4==M(a)&&2==a.W())F(a.b,U(a,\"Local request error detected and ignored\"));else if(a.o&&4==M(a))Zb(a.La,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==M(a)){F(a.b,U(a,\"Request complete\"));a.f=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.u).match(ld)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!me.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",re(a))}finally{se(a)}}}function se(a,b){if(a.a){pe(a);var c=a.a,d=a.D[0]?aa:null;a.a=null;a.D=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(gc,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function pe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction M(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<M(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<M(this)?this.a.statusText:\"\"}catch(a){return F(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return F(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Ya=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};g.Fa=function(){return this.j};g.ab=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.M+\" \"+a.u+\" \"+a.W()+\"]\"};function ue(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function ve(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ue(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}Q(a,b,c);return a};function we(a){this.ya=0;this.g=[];this.a=new qc;this.I=new Vd;this.ja=this.wa=this.F=this.ka=this.b=this.K=this.j=this.U=this.h=this.M=this.i=null;this.Ua=this.P=0;this.la=this.B=this.o=this.m=this.l=this.f=null;this.u=this.xa=this.N=-1;this.T=this.w=this.C=0;this.S=a&&a.supportsCrossDomainXhr||!1;this.J=\"\";this.c=new Yd(a&&a.concurrentRequestLimit);this.ma=new he;this.D=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ta=a&&a.fastHandshake||!1;a&&a.Ea&&this.a.Ea()}g=we.prototype;\ng.oa=8;g.G=1;function xe(a){I(a.a,\"disconnect()\");ye(a);if(3==a.G){var b=a.P++,c=L(a.F);Q(c,\"SID\",a.J);Q(c,\"RID\",b);Q(c,\"TYPE\",\"terminate\");ze(a,c);b=new K(a,a.a,b,void 0);b.K=2;b.h=Tc(L(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.da(null),b.a.fa(b.h));b.D=t();Wc(b)}Ae(a)}\nfunction ye(a){a.B&&(a.B.abort(),a.B=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);Be(a);a.c.cancel();a.l&&(k.clearTimeout(a.l),a.l=null)}function Ce(a,b){1E3==a.g.length&&xc(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Xd(a.Ua++,b));3==a.G&&De(a)}g.Ja=function(){return 0==this.G};function De(a){be(a.c)||a.l||(a.l=Ec(r(a.Oa,a),0),a.C=0)}\nfunction Ee(a,b){var c=a.c;if((c.b?1:c.a?c.a.s():0)>=a.c.f-(a.l?1:0))return xc(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.l)return I(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.u.concat(a.g),!0;if(1==a.G||2==a.G||2<=a.C)return!1;I(a.a,\"Going to retry POST\");a.l=Ec(r(a.Oa,a,b),Fe(a,a.C));a.C++;return!0}\ng.Oa=function(a){this.l=null;I(this.a,\"startForwardChannel_\");if(1==this.G)if(a)xc(this.a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new K(this,this.a,a,void 0),c=this.i;this.M&&(c?(c=Ea(c),Ga(c,this.M)):c=this.M);null===this.h&&(b.j=c);var d=Ge(this,b),e=L(this.F);Q(e,\"RID\",a);Q(e,\"CVER\",21);this.D&&this.j&&Q(e,\"X-HTTP-Session-Id\",this.j);ze(this,e);this.h&&c&&ve(e,this.h,c);ae(this.c,b);this.Ta?(Q(e,\"$req\",d),Sc(b,e,null)):Sc(b,\ne,d);this.G=2}else 3==this.G&&(a?He(this,a):0==this.g.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):be(this.c)?xc(this.a,\"startForwardChannel_ returned: connection already in progress\"):(He(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction He(a,b){var c;b?c=b.f:c=a.P++;var d=L(a.F);Q(d,\"SID\",a.J);Q(d,\"RID\",c);Q(d,\"AID\",a.N);ze(a,d);a.h&&a.i&&ve(d,a.h,a.i);c=new K(a,a.a,c,a.C+1);null===a.h&&(c.j=a.i);b&&(a.g=b.u.concat(a.g));b=Ge(a,c);c.setTimeout(1E4+Math.round(1E4*Math.random()));ae(a.c,c);Sc(c,d,b)}function ze(a,b){a.f&&hd({},function(a,d){Q(b,d,a)})}\nfunction Ge(a,b){var c=Math.min(a.g.length,1E3),d=a.f?r(a.f.Va,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var G=e[v].a,Z=e[v].b;G-=f;if(0>G)f=Math.max(0,e[v].a-100),m=!1;else try{ie(Z,h,\"req\"+G+\"_\")}catch(Mb){d&&d(Z)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.u=a;return d}function Ie(a){if(!a.b&&!a.m){a.T=1;var b=a.Na;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.w=0}}\nfunction Je(a){if(a.b||a.m)return xc(a.a,\"Request already in progress\"),!1;if(3<=a.w)return!1;I(a.a,\"Going to retry GET\");a.T++;a.m=Ec(r(a.Na,a),Fe(a,a.w));a.w++;return!0}\ng.Na=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new K(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.P=0;var a=L(this.wa);Q(a,\"RID\",\"rpc\");Q(a,\"SID\",this.J);Q(a,\"CI\",this.la?\"0\":\"1\");Q(a,\"AID\",this.N);ze(this,a);Q(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&ve(a,this.h,this.i);Vc(this.b,a,!0,this.ja);I(this.a,\"New Request created\")};\nfunction Sd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&$d(a.c,d);a.la=c;a.u=b.f;I(a.a,\"connectChannel_()\");a.F=Ke(a,a.ka);De(a)}function Ud(a,b){I(a.a,\"Test Connection Failed\");a.u=b.f;V(a,2)}\ng.Ma=function(a,b){if(0!=this.G&&(this.b==a||ce(this.c,a)))if(this.u=a.C,ce(this.c,a)&&3==this.G){try{var c=this.ma.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Be(this),this.b.cancel(),this.b=null;else break a;else E(this.a.a,\"We do not have a BackChannel established\");Je(this);J(18)}else this.xa=b[1],a=this.xa-this.N,0<a&&(b=\nb[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.la&&0==this.w&&!this.o&&(this.o=Ec(r(this.bb,this),6E3)));else I(this.a,\"Bad POST response data returned\"),V(this,11)}else if(this.b==a&&Be(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.ma.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.G)if(\"c\"==d[0]){this.J=d[1];this.ja=d[2];var e=d[3];null!=e&&(this.oa=e,H(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.ya=d,H(this.a,\"SVER=\"+this.ya));\nthis.D&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&$d(this.c,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.K=d,Q(this.F,this.j,d)):E(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.G=3;this.f&&this.f.Da();this.wa=Td(this,this.ja,this.ka);Ie(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.G&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):xe(this):\"noop\"!=d[0]&&this.f&&this.f.Ca(d),this.w=0)}};\ng.bb=function(){null!=this.o&&(this.o=null,this.b.cancel(),this.b=null,Je(this),J(19))};function Be(a){null!=a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.ua=function(a){I(this.a,\"Request complete\");var b=null;if(this.b==a){Be(this);this.b=null;var c=2}else if(ce(this.c,a))b=a.u,de(this.c,a),c=1;else return;this.u=a.C;if(0!=this.G)if(a.c)1==c?(Dc(a.m?a.m.length:0,t()-a.D,this.C),De(this)):Ie(this);else{var d=a.l;if(3==d||0==d&&0<this.u)I(this.a,\"Not retrying due to error type\");else{var e=this;I(this.a,function(){return\"Maybe retrying, last error: \"+Pc(d,e.u)});if(1==c&&Ee(this,a)||2==c&&Je(this))return;I(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&fe(this.c,b);I(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Fe(a,b){var c=5E3+Math.floor(1E4*Math.random());a.ra()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){H(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=r(a.jb,a);c||(c=new P(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||nd(c,\"https\"),Tc(c));je(c.toString(),d)}else J(2);I(a.a,\"HttpChannel: error - \"+b);a.G=0;a.f&&a.f.Ba(b);Ae(a);ye(a)}g.jb=function(a){a?(H(this.a,\"Successfully pinged google.com\"),J(2)):(H(this.a,\"Failed to ping google.com\"),J(1))};\nfunction Ae(a){a.G=0;a.u=-1;if(a.f){var b=ee(a.c);if(0!=b.length||0!=a.g.length)I(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,ya(a.g),a.g.length=0;a.f.Aa()}}function Ke(a,b){b=Le(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Le(a,a.ia()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Le(a,b,c){var d=Cd(c);if(\"\"!=d.b)b&&od(d,b+\".\"+d.b),pd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Dd(e.protocol,f,e.port,c)}a.U&&Ba(a.U,function(a,b){Q(d,b,a)});b=a.j;c=a.K;b&&c&&Q(d,b,c);Q(d,\"VER\",a.oa);ze(a,d);return d}g.da=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.m=this.S;return a};g.ra=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Ld;function Me(){}g=Me.prototype;g.Da=function(){};\ng.Ca=function(){};g.Ba=function(){};g.Aa=function(){};g.Va=function(){};function Ne(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Oe(){if(z&&!(10<=Number(Ua)))throw Error(\"Environmental error: no available transport.\");}Oe.prototype.a=function(a,b){return new W(a,b)};\nfunction W(a,b){B.call(this);this.a=new we(b);this.b=a;this.m=b&&b.testUrl?b.testUrl:Ne(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nthis.a.M=a;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.h=a);this.l=b&&b.supportsCrossDomainXhr||!1;this.j=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],E(this.f,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Pe(this)}u(W,B);g=W.prototype;g.addEventListener=function(a,b,c,d){W.H.addEventListener.call(this,a,b,c,d)};\ng.removeEventListener=function(a,b,c,d){W.H.removeEventListener.call(this,a,b,c,d)};\ng.Za=function(){this.a.f=this.h;this.l&&(this.a.S=!0);var a=this.a,b=this.m,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");J(0);a.ka=c;a.U=d||{};a.D&&(I(a.a,\"connect() bypassed channel-test.\"),a.I.b=[],a.I.a=!1);I(a.a,\"connectTest_()\");a.B=new Qd(a,a.a);null===a.h&&(a.B.i=a.i);c=b;a.h&&a.i&&(c=ve(b,a.h,a.i));a=a.B;a.l=c;b=Ke(a.a,a.l);J(3);c=a.a.I.b;null!=c?(a.g=c[0],a.R=1,Rd(a)):(Xc(b,\"MODE\",\"init\"),!a.a.D&&a.a.j&&Xc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new K(a,a.b,void 0,void 0),a.c.j=a.i,Vc(a.c,b,!1,\nnull),a.R=0)};g.close=function(){xe(this.a)};g.$a=function(a){if(l(a)){var b={};b.__data__=a;Ce(this.a,b)}else this.j?(b={},b.__data__=Db(a),Ce(this.a,b)):Ce(this.a,a)};g.A=function(){this.a.f=null;delete this.h;xe(this.a);delete this.a;W.H.A.call(this)};function Qe(a){Od.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}u(Qe,Od);function Re(){Pd.call(this);this.status=1}u(Re,Pd);\nfunction Pe(a){this.a=a}u(Pe,Me);Pe.prototype.Da=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Pe.prototype.Ca=function(a){this.a.dispatchEvent(new Qe(a))};Pe.prototype.Ba=function(a){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Re(a))};Pe.prototype.Aa=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Se=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Oe);function Te(){this.b=[];this.a=[]}function Ue(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Te.prototype.s=function(){return this.b.length+this.a.length};Te.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Te.prototype.v=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ve(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(We);this.a=new Te;this.b=new S;this.g=null;this.ba()}u(Ve,w);var We=\"[goog.structs.Pool] Min can not be greater than max\";g=Ve.prototype;g.ea=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.s()&&(b=Ue(this.a),!this.ta(b));)this.ba();!b&&this.s()<this.c&&(b=this.qa());b&&(this.g=a,this.b.add(b));return b}};g.ib=function(a){return kd(this.b.a,Wd(a))?(this.na(a),!0):!1};\ng.na=function(a){kd(this.b.a,Wd(a));this.ta(a)&&this.s()<this.c?this.a.a.push(a):Xe(a)};g.ba=function(){for(var a=this.a;this.s()<this.h;){var b=this.qa();a.a.push(b)}for(;this.s()>this.c&&0<this.a.s();)Xe(Ue(a))};g.qa=function(){return{}};function Xe(a){if(\"function\"==typeof a.Z)a.Z();else for(var b in a)a[b]=null}g.ta=function(a){return\"function\"==typeof a.Wa?a.Wa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.s=function(){return this.a.s()+this.b.s()};\ng.A=function(){Ve.H.A.call(this);if(0<this.b.s())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Xe(Ue(a));delete this.a};function Ye(a,b){this.a=a;this.b=b};function Ze(a){this.a=[];if(a)a:{if(a instanceof Ze){var b=a.O();a=a.v();if(0>=this.s()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Ye(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)$e(this,b[d],a[d])}}function $e(a,b,c){var d=a.a;d.push(new Ye(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Ze.prototype.v=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nZe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Ze.prototype.s=function(){return this.a.length};function af(){Ze.call(this)}u(af,Ze);function X(a,b){this.f=new af;Ve.call(this,a,b)}u(X,Ve);g=X.prototype;g.ea=function(a,b){if(!a)return X.H.ea.call(this);$e(this.f,void 0!==b?b:100,a);this.sa()};g.sa=function(){for(var a=this.f;0<a.s();){var b=this.ea();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.na=function(a){X.H.na.call(this,a);this.sa()};g.ba=function(){X.H.ba.call(this);this.sa()};g.A=function(){X.H.A.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Y(a,b,c,d){this.l=a;this.j=!!d;X.call(this,b,c)}u(Y,X);Y.prototype.qa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Y.prototype.ta=function(a){return!a.i&&!a.a};Oe.prototype.createWebChannel=Oe.prototype.a;W.prototype.send=W.prototype.$a;W.prototype.open=W.prototype.Za;W.prototype.close=W.prototype.close;Fc.NO_ERROR=0;Fc.TIMEOUT=8;Fc.HTTP_ERROR=6;Gc.COMPLETE=\"complete\";Md.EventType=Nd;Nd.OPEN=\"a\";Nd.CLOSE=\"b\";Nd.ERROR=\"c\";Nd.MESSAGE=\"d\";B.prototype.listen=B.prototype.aa;Y.prototype.getObject=Y.prototype.ea;Y.prototype.releaseObject=Y.prototype.ib;T.prototype.listenOnce=T.prototype.Ha;T.prototype.getLastError=T.prototype.ab;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Ya;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Se,ErrorCode:Fc,EventType:Gc,WebChannel:Md,XhrIoPool:Y};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../webchannel-wrapper/dist/index.js\n// module id = 115\n// module chunks = 1"],"sourceRoot":""}